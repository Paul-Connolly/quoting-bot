//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace QuotingBot.Common.RelayHouseholdService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="HouseholdSoap", Namespace="http://relay.ie/Household")]
    public partial class Household : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetQuotesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcceptQuoteOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Household() {
            this.Url = global::QuotingBot.Common.Properties.Settings.Default.QuotingBot_Common_RelayHouseholdService_Household;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetQuotesCompletedEventHandler GetQuotesCompleted;
        
        /// <remarks/>
        public event GetDocumentsCompletedEventHandler GetDocumentsCompleted;
        
        /// <remarks/>
        public event AcceptQuoteCompletedEventHandler AcceptQuoteCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://relay.ie/Household/GetQuotes", RequestNamespace="http://relay.ie/Household", ResponseNamespace="http://relay.ie/Household", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HomeWebServiceResponse GetQuotes(HomeWebServiceRequest request) {
            object[] results = this.Invoke("GetQuotes", new object[] {
                        request});
            return ((HomeWebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetQuotesAsync(HomeWebServiceRequest request) {
            this.GetQuotesAsync(request, null);
        }
        
        /// <remarks/>
        public void GetQuotesAsync(HomeWebServiceRequest request, object userState) {
            if ((this.GetQuotesOperationCompleted == null)) {
                this.GetQuotesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuotesOperationCompleted);
            }
            this.InvokeAsync("GetQuotes", new object[] {
                        request}, this.GetQuotesOperationCompleted, userState);
        }
        
        private void OnGetQuotesOperationCompleted(object arg) {
            if ((this.GetQuotesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuotesCompleted(this, new GetQuotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://relay.ie/Household/GetDocuments", RequestNamespace="http://relay.ie/Household", ResponseNamespace="http://relay.ie/Household", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HomeWebServiceResponse GetDocuments(HomeWebServiceRequest request) {
            object[] results = this.Invoke("GetDocuments", new object[] {
                        request});
            return ((HomeWebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentsAsync(HomeWebServiceRequest request) {
            this.GetDocumentsAsync(request, null);
        }
        
        /// <remarks/>
        public void GetDocumentsAsync(HomeWebServiceRequest request, object userState) {
            if ((this.GetDocumentsOperationCompleted == null)) {
                this.GetDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetDocuments", new object[] {
                        request}, this.GetDocumentsOperationCompleted, userState);
        }
        
        private void OnGetDocumentsOperationCompleted(object arg) {
            if ((this.GetDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentsCompleted(this, new GetDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://relay.ie/Household/AcceptQuote", RequestNamespace="http://relay.ie/Household", ResponseNamespace="http://relay.ie/Household", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HomeWebServiceResponse AcceptQuote(HomeWebServiceRequest request) {
            object[] results = this.Invoke("AcceptQuote", new object[] {
                        request});
            return ((HomeWebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public void AcceptQuoteAsync(HomeWebServiceRequest request) {
            this.AcceptQuoteAsync(request, null);
        }
        
        /// <remarks/>
        public void AcceptQuoteAsync(HomeWebServiceRequest request, object userState) {
            if ((this.AcceptQuoteOperationCompleted == null)) {
                this.AcceptQuoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcceptQuoteOperationCompleted);
            }
            this.InvokeAsync("AcceptQuote", new object[] {
                        request}, this.AcceptQuoteOperationCompleted, userState);
        }
        
        private void OnAcceptQuoteOperationCompleted(object arg) {
            if ((this.AcceptQuoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcceptQuoteCompleted(this, new AcceptQuoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class HomeWebServiceRequest {
        
        private string relayNumberField;
        
        private string passwordField;
        
        private string brokerIdField;
        
        private string loginIdField;
        
        private string brokerNameField;
        
        private string brokerAddress1Field;
        
        private double clientVersionField;
        
        private BusinessProcess businessProcessField;
        
        private InsurerConfirmationProcessingType processingTypeField;
        
        private Policy policyField;
        
        private PolicyHolder[] policyHoldersField;
        
        private Occupancy occupancyField;
        
        private Building buildingField;
        
        private Address riskAddressField;
        
        private InterestedParty[] interestedPartiesField;
        
        private Caravan caravanField;
        
        private Risk[] risksField;
        
        private InsurancePolicy[] leadsField;
        
        private InsurerCredential[] brokerSpecificInsurerCredentialsField;
        
        private InsurerRatingFactor[] insurerRatingFactorsField;
        
        private HomeRequestSource homeRequestSourceField;
        
        private string quoteReferenceField;
        
        private DocumentType[] requiredDocumentsField;
        
        private string selectedRelayQuoteIdField;
        
        private bool fullQuoteRequestField;
        
        /// <remarks/>
        public string RelayNumber {
            get {
                return this.relayNumberField;
            }
            set {
                this.relayNumberField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string BrokerId {
            get {
                return this.brokerIdField;
            }
            set {
                this.brokerIdField = value;
            }
        }
        
        /// <remarks/>
        public string LoginId {
            get {
                return this.loginIdField;
            }
            set {
                this.loginIdField = value;
            }
        }
        
        /// <remarks/>
        public string BrokerName {
            get {
                return this.brokerNameField;
            }
            set {
                this.brokerNameField = value;
            }
        }
        
        /// <remarks/>
        public string BrokerAddress1 {
            get {
                return this.brokerAddress1Field;
            }
            set {
                this.brokerAddress1Field = value;
            }
        }
        
        /// <remarks/>
        public double ClientVersion {
            get {
                return this.clientVersionField;
            }
            set {
                this.clientVersionField = value;
            }
        }
        
        /// <remarks/>
        public BusinessProcess BusinessProcess {
            get {
                return this.businessProcessField;
            }
            set {
                this.businessProcessField = value;
            }
        }
        
        /// <remarks/>
        public InsurerConfirmationProcessingType ProcessingType {
            get {
                return this.processingTypeField;
            }
            set {
                this.processingTypeField = value;
            }
        }
        
        /// <remarks/>
        public Policy Policy {
            get {
                return this.policyField;
            }
            set {
                this.policyField = value;
            }
        }
        
        /// <remarks/>
        public PolicyHolder[] PolicyHolders {
            get {
                return this.policyHoldersField;
            }
            set {
                this.policyHoldersField = value;
            }
        }
        
        /// <remarks/>
        public Occupancy Occupancy {
            get {
                return this.occupancyField;
            }
            set {
                this.occupancyField = value;
            }
        }
        
        /// <remarks/>
        public Building Building {
            get {
                return this.buildingField;
            }
            set {
                this.buildingField = value;
            }
        }
        
        /// <remarks/>
        public Address RiskAddress {
            get {
                return this.riskAddressField;
            }
            set {
                this.riskAddressField = value;
            }
        }
        
        /// <remarks/>
        public InterestedParty[] InterestedParties {
            get {
                return this.interestedPartiesField;
            }
            set {
                this.interestedPartiesField = value;
            }
        }
        
        /// <remarks/>
        public Caravan Caravan {
            get {
                return this.caravanField;
            }
            set {
                this.caravanField = value;
            }
        }
        
        /// <remarks/>
        public Risk[] Risks {
            get {
                return this.risksField;
            }
            set {
                this.risksField = value;
            }
        }
        
        /// <remarks/>
        public InsurancePolicy[] Leads {
            get {
                return this.leadsField;
            }
            set {
                this.leadsField = value;
            }
        }
        
        /// <remarks/>
        public InsurerCredential[] BrokerSpecificInsurerCredentials {
            get {
                return this.brokerSpecificInsurerCredentialsField;
            }
            set {
                this.brokerSpecificInsurerCredentialsField = value;
            }
        }
        
        /// <remarks/>
        public InsurerRatingFactor[] InsurerRatingFactors {
            get {
                return this.insurerRatingFactorsField;
            }
            set {
                this.insurerRatingFactorsField = value;
            }
        }
        
        /// <remarks/>
        public HomeRequestSource HomeRequestSource {
            get {
                return this.homeRequestSourceField;
            }
            set {
                this.homeRequestSourceField = value;
            }
        }
        
        /// <remarks/>
        public string QuoteReference {
            get {
                return this.quoteReferenceField;
            }
            set {
                this.quoteReferenceField = value;
            }
        }
        
        /// <remarks/>
        public DocumentType[] RequiredDocuments {
            get {
                return this.requiredDocumentsField;
            }
            set {
                this.requiredDocumentsField = value;
            }
        }
        
        /// <remarks/>
        public string SelectedRelayQuoteId {
            get {
                return this.selectedRelayQuoteIdField;
            }
            set {
                this.selectedRelayQuoteIdField = value;
            }
        }
        
        /// <remarks/>
        public bool FullQuoteRequest {
            get {
                return this.fullQuoteRequestField;
            }
            set {
                this.fullQuoteRequestField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum BusinessProcess {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        NewBusiness,
        
        /// <remarks/>
        PermanentMidTermAdjustment,
        
        /// <remarks/>
        TemporaryAdditionalDriver,
        
        /// <remarks/>
        CancelTemporaryAdditionalDriver,
        
        /// <remarks/>
        TemporaryAdditionalVehicle,
        
        /// <remarks/>
        CancelTemporaryAdditionalVehicle,
        
        /// <remarks/>
        TemporarySubstituteVehicle,
        
        /// <remarks/>
        CancelTemporarySubstituteVehicle,
        
        /// <remarks/>
        Suspension,
        
        /// <remarks/>
        ReinstatementFollowingSuspension,
        
        /// <remarks/>
        MidTermCancellation,
        
        /// <remarks/>
        ReinstatedFollowingCancellation,
        
        /// <remarks/>
        DuplicateCertificate,
        
        /// <remarks/>
        RenewalOffer,
        
        /// <remarks/>
        RenewalConfirmation,
        
        /// <remarks/>
        Lapse,
        
        /// <remarks/>
        InsurerLedCancellation,
        
        /// <remarks/>
        LockPolicy,
        
        /// <remarks/>
        RemoveFromFullCycle,
        
        /// <remarks/>
        RenewalTransfer,
        
        /// <remarks/>
        Quotation,
        
        /// <remarks/>
        RenewalInvitation,
        
        /// <remarks/>
        RenewalChase,
        
        /// <remarks/>
        DocumentChase,
        
        /// <remarks/>
        QuoteLastYearsProspects,
        
        /// <remarks/>
        Accounting,
        
        /// <remarks/>
        AmendNCD,
        
        /// <remarks/>
        GeneralTemporaryMidTermAdjustment,
        
        /// <remarks/>
        MidTermAdjustmentAtRenewal,
        
        /// <remarks/>
        NonFullCycleMidTermAdjustment,
        
        /// <remarks/>
        NonFullCycleManualRebroke,
        
        /// <remarks/>
        MidTermSwitch,
        
        /// <remarks/>
        ExtendTemporaryAdditionalDriver,
        
        /// <remarks/>
        ExtendTemporaryAdditionalVehicle,
        
        /// <remarks/>
        ExtendTemporarySubstituteVehicle,
        
        /// <remarks/>
        AmendPaymentType,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum InsurerConfirmationProcessingType {
        
        /// <remarks/>
        Standard,
        
        /// <remarks/>
        ConfirmationRetry,
        
        /// <remarks/>
        LogEventOnly,
        
        /// <remarks/>
        ManualConfirmation,
        
        /// <remarks/>
        CancelConfirmation,
        
        /// <remarks/>
        ConfirmationRetryDownloadDocuments,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class Policy {
        
        private System.Nullable<System.DateTime> effectiveStartDateField;
        
        private decimal voluntaryExcessField;
        
        private string agencyNameField;
        
        private string agencyCodeField;
        
        private string brokerPolicyReferenceField;
        
        private string overrideAuthorisationCodeField;
        
        private InsuranceHistory insuranceHistoryField;
        
        private Contact correspondenceContactField;
        
        private string departmentCodeField;
        
        private string handlerCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> EffectiveStartDate {
            get {
                return this.effectiveStartDateField;
            }
            set {
                this.effectiveStartDateField = value;
            }
        }
        
        /// <remarks/>
        public decimal VoluntaryExcess {
            get {
                return this.voluntaryExcessField;
            }
            set {
                this.voluntaryExcessField = value;
            }
        }
        
        /// <remarks/>
        public string AgencyName {
            get {
                return this.agencyNameField;
            }
            set {
                this.agencyNameField = value;
            }
        }
        
        /// <remarks/>
        public string AgencyCode {
            get {
                return this.agencyCodeField;
            }
            set {
                this.agencyCodeField = value;
            }
        }
        
        /// <remarks/>
        public string BrokerPolicyReference {
            get {
                return this.brokerPolicyReferenceField;
            }
            set {
                this.brokerPolicyReferenceField = value;
            }
        }
        
        /// <remarks/>
        public string OverrideAuthorisationCode {
            get {
                return this.overrideAuthorisationCodeField;
            }
            set {
                this.overrideAuthorisationCodeField = value;
            }
        }
        
        /// <remarks/>
        public InsuranceHistory InsuranceHistory {
            get {
                return this.insuranceHistoryField;
            }
            set {
                this.insuranceHistoryField = value;
            }
        }
        
        /// <remarks/>
        public Contact CorrespondenceContact {
            get {
                return this.correspondenceContactField;
            }
            set {
                this.correspondenceContactField = value;
            }
        }
        
        /// <remarks/>
        public string DepartmentCode {
            get {
                return this.departmentCodeField;
            }
            set {
                this.departmentCodeField = value;
            }
        }
        
        /// <remarks/>
        public string HandlerCode {
            get {
                return this.handlerCodeField;
            }
            set {
                this.handlerCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class InsuranceHistory {
        
        private int claimsFreeYearsField;
        
        private int yearsWithCurrentBrokerField;
        
        private InsurancePolicy[] insurancePoliciesField;
        
        private Claim[] claimsField;
        
        /// <remarks/>
        public int ClaimsFreeYears {
            get {
                return this.claimsFreeYearsField;
            }
            set {
                this.claimsFreeYearsField = value;
            }
        }
        
        /// <remarks/>
        public int YearsWithCurrentBroker {
            get {
                return this.yearsWithCurrentBrokerField;
            }
            set {
                this.yearsWithCurrentBrokerField = value;
            }
        }
        
        /// <remarks/>
        public InsurancePolicy[] InsurancePolicies {
            get {
                return this.insurancePoliciesField;
            }
            set {
                this.insurancePoliciesField = value;
            }
        }
        
        /// <remarks/>
        public Claim[] Claims {
            get {
                return this.claimsField;
            }
            set {
                this.claimsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class InsurancePolicy {
        
        private string productField;
        
        private Insurer insurerField;
        
        private string insurerTextField;
        
        private System.Nullable<System.DateTime> renewalDateField;
        
        private string policyNumberField;
        
        /// <remarks/>
        public string Product {
            get {
                return this.productField;
            }
            set {
                this.productField = value;
            }
        }
        
        /// <remarks/>
        public Insurer Insurer {
            get {
                return this.insurerField;
            }
            set {
                this.insurerField = value;
            }
        }
        
        /// <remarks/>
        public string InsurerText {
            get {
                return this.insurerTextField;
            }
            set {
                this.insurerTextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> RenewalDate {
            get {
                return this.renewalDateField;
            }
            set {
                this.renewalDateField = value;
            }
        }
        
        /// <remarks/>
        public string PolicyNumber {
            get {
                return this.policyNumberField;
            }
            set {
                this.policyNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum Insurer {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        AXA,
        
        /// <remarks/>
        Allianz,
        
        /// <remarks/>
        Zurich,
        
        /// <remarks/>
        Aviva,
        
        /// <remarks/>
        RSA,
        
        /// <remarks/>
        Benchmark,
        
        /// <remarks/>
        HCL,
        
        /// <remarks/>
        ICI,
        
        /// <remarks/>
        AIG,
        
        /// <remarks/>
        Wrightway,
        
        /// <remarks/>
        Prestige,
        
        /// <remarks/>
        GreatLakes,
        
        /// <remarks/>
        Europa,
        
        /// <remarks/>
        KennCo,
        
        /// <remarks/>
        XSDirect,
        
        /// <remarks/>
        Sertus,
        
        /// <remarks/>
        Travelers,
        
        /// <remarks/>
        Provident,
        
        /// <remarks/>
        Setanta,
        
        /// <remarks/>
        ARB,
        
        /// <remarks/>
        Ecclesiastical,
        
        /// <remarks/>
        Asgard,
        
        /// <remarks/>
        Crest,
        
        /// <remarks/>
        DAS,
        
        /// <remarks/>
        JRClare,
        
        /// <remarks/>
        Dolmen,
        
        /// <remarks/>
        FBD,
        
        /// <remarks/>
        Finsure,
        
        /// <remarks/>
        FirstIreland,
        
        /// <remarks/>
        KiddSure,
        
        /// <remarks/>
        Chubb,
        
        /// <remarks/>
        Cigna,
        
        /// <remarks/>
        Generali,
        
        /// <remarks/>
        Liberty,
        
        /// <remarks/>
        Quinn,
        
        /// <remarks/>
        Hastings,
        
        /// <remarks/>
        Securus,
        
        /// <remarks/>
        CoverCentre,
        
        /// <remarks/>
        Inov8,
        
        /// <remarks/>
        Stuart,
        
        /// <remarks/>
        LloydsSyndicate,
        
        /// <remarks/>
        OneTwoThree,
        
        /// <remarks/>
        Novae,
        
        /// <remarks/>
        Culleton,
        
        /// <remarks/>
        JLT,
        
        /// <remarks/>
        MISClaims,
        
        /// <remarks/>
        MotoristLegalProtection,
        
        /// <remarks/>
        GroupPersonalAccident,
        
        /// <remarks/>
        Mapfre,
        
        /// <remarks/>
        Patrona,
        
        /// <remarks/>
        Axis,
        
        /// <remarks/>
        BroadgateUnderwriting,
        
        /// <remarks/>
        CatlinUnderwriting,
        
        /// <remarks/>
        CanopiusUnderwriting,
        
        /// <remarks/>
        CGice,
        
        /// <remarks/>
        CollingwoodInsurance,
        
        /// <remarks/>
        EliteInsuranceCompany,
        
        /// <remarks/>
        HisCox,
        
        /// <remarks/>
        HSBEngineeringInsurance,
        
        /// <remarks/>
        HathawayAndCope,
        
        /// <remarks/>
        SagicorAtLloyds,
        
        /// <remarks/>
        WRBerkley,
        
        /// <remarks/>
        CrashServices,
        
        /// <remarks/>
        AlliedRiskManagement,
        
        /// <remarks/>
        Footprint,
        
        /// <remarks/>
        Bump,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        ChartisInsurance,
        
        /// <remarks/>
        AXABroker,
        
        /// <remarks/>
        AXADirect,
        
        /// <remarks/>
        Cornhill,
        
        /// <remarks/>
        FCRebrokedAXABroker,
        
        /// <remarks/>
        FirstCallDirect,
        
        /// <remarks/>
        OneDirect,
        
        /// <remarks/>
        PatronaUnderwritingLtd,
        
        /// <remarks/>
        ProvidentInsurance,
        
        /// <remarks/>
        Torch,
        
        /// <remarks/>
        UnlistedInsurerNotIreland,
        
        /// <remarks/>
        UnlistedInsurerIreland,
        
        /// <remarks/>
        KeyCare,
        
        /// <remarks/>
        Octane,
        
        /// <remarks/>
        AAIreland,
        
        /// <remarks/>
        Ivernia,
        
        /// <remarks/>
        Claimsafe,
        
        /// <remarks/>
        ArachasInsurance,
        
        /// <remarks/>
        Munstergroup,
        
        /// <remarks/>
        PlumUnderwriter,
        
        /// <remarks/>
        XsCover,
        
        /// <remarks/>
        XlCatlin,
        
        /// <remarks/>
        ChubbInsurance,
        
        /// <remarks/>
        DualUnderwriting,
        
        /// <remarks/>
        MidasUnderwriting,
        
        /// <remarks/>
        Willis,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class HomeDocumentWebServiceResult {
        
        private string fileNameField;
        
        private DocumentType documentTypeField;
        
        private byte[] dataField;
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public DocumentType DocumentType {
            get {
                return this.documentTypeField;
            }
            set {
                this.documentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum DocumentType {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        Quote,
        
        /// <remarks/>
        Proposal,
        
        /// <remarks/>
        Schedule,
        
        /// <remarks/>
        Certificate,
        
        /// <remarks/>
        InterestedParty,
        
        /// <remarks/>
        DirectDebitMandate,
        
        /// <remarks/>
        Receipt,
        
        /// <remarks/>
        PolicyBook,
        
        /// <remarks/>
        DocumentChecklist,
        
        /// <remarks/>
        RenewalInvitation,
        
        /// <remarks/>
        ProofOfBonus,
        
        /// <remarks/>
        CoverLetter,
        
        /// <remarks/>
        StatementOfFact,
        
        /// <remarks/>
        SuitabilityStatement,
        
        /// <remarks/>
        GapInCoverLetter,
        
        /// <remarks/>
        TermsOfBusiness,
        
        /// <remarks/>
        DirectDebitConfirmationLetter,
        
        /// <remarks/>
        DataProtectionDetails,
        
        /// <remarks/>
        MotoringAbroadDetails,
        
        /// <remarks/>
        LeadsMarketing,
        
        /// <remarks/>
        FinanceMandate,
        
        /// <remarks/>
        PolicyBenefits,
        
        /// <remarks/>
        PolicyExclusions,
        
        /// <remarks/>
        DirectDebitFailureReferLetter,
        
        /// <remarks/>
        DirectDebitFailureCancelLetter,
        
        /// <remarks/>
        ScheduleOfSpecifiedItems,
        
        /// <remarks/>
        LegalExpenses,
        
        /// <remarks/>
        ExcessProtection,
        
        /// <remarks/>
        Salary,
        
        /// <remarks/>
        PersonalAccident,
        
        /// <remarks/>
        DirectDebitNotice,
        
        /// <remarks/>
        KeyFacts,
        
        /// <remarks/>
        CreditAgreement,
        
        /// <remarks/>
        StatementOfRisk,
        
        /// <remarks/>
        RenewalChaseLetter,
        
        /// <remarks/>
        LapseNotificationLetter,
        
        /// <remarks/>
        ChaseLetter,
        
        /// <remarks/>
        FinalNotice,
        
        /// <remarks/>
        Survey,
        
        /// <remarks/>
        KeyCare,
        
        /// <remarks/>
        LastYearsProspectLetter,
        
        /// <remarks/>
        PolicyEndorsements,
        
        /// <remarks/>
        ClientSchedule,
        
        /// <remarks/>
        PremiumBreakdown,
        
        /// <remarks/>
        NoClaimsDiscountStatement,
        
        /// <remarks/>
        Cheque,
        
        /// <remarks/>
        LostDiskDeclaration,
        
        /// <remarks/>
        NoticeToPolicyholder,
        
        /// <remarks/>
        Custom,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class BrokerOverride {
        
        private bool requiresAuthCodeField;
        
        private string authCodeField;
        
        private bool canOverrideReferralField;
        
        private bool canOverrideDeclineField;
        
        private bool canOverridePremiumField;
        
        private bool isPercentageField;
        
        private double limitLowerField;
        
        private double limitUpperField;
        
        private double minimumPremiumField;
        
        /// <remarks/>
        public bool RequiresAuthCode {
            get {
                return this.requiresAuthCodeField;
            }
            set {
                this.requiresAuthCodeField = value;
            }
        }
        
        /// <remarks/>
        public string AuthCode {
            get {
                return this.authCodeField;
            }
            set {
                this.authCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool CanOverrideReferral {
            get {
                return this.canOverrideReferralField;
            }
            set {
                this.canOverrideReferralField = value;
            }
        }
        
        /// <remarks/>
        public bool CanOverrideDecline {
            get {
                return this.canOverrideDeclineField;
            }
            set {
                this.canOverrideDeclineField = value;
            }
        }
        
        /// <remarks/>
        public bool CanOverridePremium {
            get {
                return this.canOverridePremiumField;
            }
            set {
                this.canOverridePremiumField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPercentage {
            get {
                return this.isPercentageField;
            }
            set {
                this.isPercentageField = value;
            }
        }
        
        /// <remarks/>
        public double LimitLower {
            get {
                return this.limitLowerField;
            }
            set {
                this.limitLowerField = value;
            }
        }
        
        /// <remarks/>
        public double LimitUpper {
            get {
                return this.limitUpperField;
            }
            set {
                this.limitUpperField = value;
            }
        }
        
        /// <remarks/>
        public double MinimumPremium {
            get {
                return this.minimumPremiumField;
            }
            set {
                this.minimumPremiumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class RefusalElement {
        
        private QuoteOutcome refusalTypeField;
        
        private string descriptionField;
        
        /// <remarks/>
        public QuoteOutcome RefusalType {
            get {
                return this.refusalTypeField;
            }
            set {
                this.refusalTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum QuoteOutcome {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        PremiumReturned,
        
        /// <remarks/>
        Refer,
        
        /// <remarks/>
        Decline,
        
        /// <remarks/>
        Failed,
        
        /// <remarks/>
        ReferQuoteOnly,
        
        /// <remarks/>
        ReferSubmitToInsurer,
        
        /// <remarks/>
        DeclineContinue,
        
        /// <remarks/>
        ReferToManager,
        
        /// <remarks/>
        ReferResubmitToInsurer,
        
        /// <remarks/>
        ManagePriceFailure,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class NoteElement {
        
        private string noteTypeField;
        
        private string codeField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string NoteType {
            get {
                return this.noteTypeField;
            }
            set {
                this.noteTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class EndorsementElement {
        
        private string codeField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class BreakdownElement {
        
        private decimal amountField;
        
        private string descriptionField;
        
        private string codeValueField;
        
        private string coverCodeField;
        
        private double percentageField;
        
        private decimal runningTotalField;
        
        /// <remarks/>
        public decimal Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string CodeValue {
            get {
                return this.codeValueField;
            }
            set {
                this.codeValueField = value;
            }
        }
        
        /// <remarks/>
        public string CoverCode {
            get {
                return this.coverCodeField;
            }
            set {
                this.coverCodeField = value;
            }
        }
        
        /// <remarks/>
        public double Percentage {
            get {
                return this.percentageField;
            }
            set {
                this.percentageField = value;
            }
        }
        
        /// <remarks/>
        public decimal RunningTotal {
            get {
                return this.runningTotalField;
            }
            set {
                this.runningTotalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class AddOnPolicyElement {
        
        private string descriptionField;
        
        private string[] valuesField;
        
        private string defaultValueField;
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
        
        /// <remarks/>
        public string DefaultValue {
            get {
                return this.defaultValueField;
            }
            set {
                this.defaultValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class HomeQuoteWebServiceResult {
        
        private string insurerNameField;
        
        private Insurer insurerEnumField;
        
        private string schemeNameField;
        
        private string schemeCodeField;
        
        private AddOnPolicyElement[] addOnPoliciesField;
        
        private BreakdownElement[] breakdownsField;
        
        private EndorsementElement[] endorsementsField;
        
        private NoteElement[] notesField;
        
        private RefusalElement[] refusalsField;
        
        private string serialisedRelayQuoteField;
        
        private string relayQuoteIdField;
        
        private int houseStructureGrantedSumInsuredField;
        
        private int houseContentsGrantedSumInsuredField;
        
        private int houseGrantedSumInsuredField;
        
        private int allRisksGrantedSumInsuredField;
        
        private int specifiedAllRisksGrantedSumInsuredField;
        
        private int unspecifiedAllRisksGrantedSumInsuredField;
        
        private int sportsEquipmentGrantedSumInsuredField;
        
        private int pedalCyclesGrantedSumInsuredField;
        
        private int smallCraftGrantedSumInsuredField;
        
        private int homeOfficeGrantedSumInsuredField;
        
        private int caravanStructureGrantedSumInsuredField;
        
        private int caravanContentsGrantedSumInsuredField;
        
        private int caravanGrantedSumInsuredField;
        
        private double houseStructurePremiumField;
        
        private double houseContentsPremiumField;
        
        private double housePremiumField;
        
        private double specifiedAllRisksPremiumField;
        
        private double unspecifiedAllRisksPremiumField;
        
        private double sportsEquipmentPremiumField;
        
        private double pedalCyclesPremiumField;
        
        private double smallCraftPremiumField;
        
        private double homeOfficePremiumField;
        
        private double caravanStructurePremiumField;
        
        private double caravanContentsPremiumField;
        
        private double caravanPremiumField;
        
        private double policyHolderAgePercentageField;
        
        private double policyHolderAgePremiumField;
        
        private double propertyAgePercentageField;
        
        private double propertyAgePremiumField;
        
        private double locksPercentageField;
        
        private double locksPremiumField;
        
        private double claimFreeYearsPercentageField;
        
        private double claimFreeYearsPremiumField;
        
        private double alarmTypePercentageField;
        
        private double alarmTypePremiumField;
        
        private double heatingTypePercentageField;
        
        private double heatingTypePremiumField;
        
        private double smokeDetectorsPercentageField;
        
        private double smokeDetectorsPremiumField;
        
        private double highSumInsuredPercentageField;
        
        private double highSumInsuredPremiumField;
        
        private double daytimeOccupancyPercentageField;
        
        private double daytimeOccupancyPremiumField;
        
        private double neighbourhoodWatchPercentageField;
        
        private double neighbourhoodWatchPremiumField;
        
        private double currentCarInsurerPercentageField;
        
        private double currentCarInsurerPremiumField;
        
        private double voluntaryExcessPercentageField;
        
        private double voluntaryExcessPremiumField;
        
        private bool houseStructureIncludesAccidentalDamageField;
        
        private bool houseContentsIncludesAccidentalDamageField;
        
        private double netPremiumField;
        
        private double governmentLevyPercentageField;
        
        private double governmentLevyPremiumField;
        
        private double grossPremiumField;
        
        private string districtBandField;
        
        private string districtCodeField;
        
        private string districtTownCodeField;
        
        private string districtCountyCodeField;
        
        private int policyExcessField;
        
        private int voluntaryExcessField;
        
        private int totalExcessField;
        
        private string serviceVersionField;
        
        private string schemeVersionField;
        
        private QuoteOutcome outcomeField;
        
        private string outcomeReasonField;
        
        private bool isGuaranteedField;
        
        private System.DateTime dateQuotedField;
        
        private System.DateTime coverEffectiveFromField;
        
        private System.DateTime coverEffectiveToField;
        
        private System.DateTime dateOfRatesField;
        
        private bool isIndicativePremiumField;
        
        private string userPromptField;
        
        private bool minimumPremiumAppliedField;
        
        private string insurerEncryptionPublicKeyField;
        
        private string officeIdField;
        
        private string quotationReferenceField;
        
        private string brokerPrimaryAgencyIdField;
        
        private string brokerSecondaryAgencyIdField;
        
        private string brokerTertiaryAgencyIdField;
        
        private string insurerReferenceField;
        
        private string insurerOutputField;
        
        private string geoFloodRiskField;
        
        private string geoPredictiveFloodField;
        
        private string geoNonFloodField;
        
        private string geoAntiPerilField;
        
        private string geoDedScoreField;
        
        private string geoCrimeField;
        
        private string geoSubRiskField;
        
        private BrokerOverride brokerOverrideField;
        
        /// <remarks/>
        public string InsurerName {
            get {
                return this.insurerNameField;
            }
            set {
                this.insurerNameField = value;
            }
        }
        
        /// <remarks/>
        public Insurer InsurerEnum {
            get {
                return this.insurerEnumField;
            }
            set {
                this.insurerEnumField = value;
            }
        }
        
        /// <remarks/>
        public string SchemeName {
            get {
                return this.schemeNameField;
            }
            set {
                this.schemeNameField = value;
            }
        }
        
        /// <remarks/>
        public string SchemeCode {
            get {
                return this.schemeCodeField;
            }
            set {
                this.schemeCodeField = value;
            }
        }
        
        /// <remarks/>
        public AddOnPolicyElement[] AddOnPolicies {
            get {
                return this.addOnPoliciesField;
            }
            set {
                this.addOnPoliciesField = value;
            }
        }
        
        /// <remarks/>
        public BreakdownElement[] Breakdowns {
            get {
                return this.breakdownsField;
            }
            set {
                this.breakdownsField = value;
            }
        }
        
        /// <remarks/>
        public EndorsementElement[] Endorsements {
            get {
                return this.endorsementsField;
            }
            set {
                this.endorsementsField = value;
            }
        }
        
        /// <remarks/>
        public NoteElement[] Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        public RefusalElement[] Refusals {
            get {
                return this.refusalsField;
            }
            set {
                this.refusalsField = value;
            }
        }
        
        /// <remarks/>
        public string SerialisedRelayQuote {
            get {
                return this.serialisedRelayQuoteField;
            }
            set {
                this.serialisedRelayQuoteField = value;
            }
        }
        
        /// <remarks/>
        public string RelayQuoteId {
            get {
                return this.relayQuoteIdField;
            }
            set {
                this.relayQuoteIdField = value;
            }
        }
        
        /// <remarks/>
        public int HouseStructureGrantedSumInsured {
            get {
                return this.houseStructureGrantedSumInsuredField;
            }
            set {
                this.houseStructureGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public int HouseContentsGrantedSumInsured {
            get {
                return this.houseContentsGrantedSumInsuredField;
            }
            set {
                this.houseContentsGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public int HouseGrantedSumInsured {
            get {
                return this.houseGrantedSumInsuredField;
            }
            set {
                this.houseGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public int AllRisksGrantedSumInsured {
            get {
                return this.allRisksGrantedSumInsuredField;
            }
            set {
                this.allRisksGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public int SpecifiedAllRisksGrantedSumInsured {
            get {
                return this.specifiedAllRisksGrantedSumInsuredField;
            }
            set {
                this.specifiedAllRisksGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public int UnspecifiedAllRisksGrantedSumInsured {
            get {
                return this.unspecifiedAllRisksGrantedSumInsuredField;
            }
            set {
                this.unspecifiedAllRisksGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public int SportsEquipmentGrantedSumInsured {
            get {
                return this.sportsEquipmentGrantedSumInsuredField;
            }
            set {
                this.sportsEquipmentGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public int PedalCyclesGrantedSumInsured {
            get {
                return this.pedalCyclesGrantedSumInsuredField;
            }
            set {
                this.pedalCyclesGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public int SmallCraftGrantedSumInsured {
            get {
                return this.smallCraftGrantedSumInsuredField;
            }
            set {
                this.smallCraftGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public int HomeOfficeGrantedSumInsured {
            get {
                return this.homeOfficeGrantedSumInsuredField;
            }
            set {
                this.homeOfficeGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public int CaravanStructureGrantedSumInsured {
            get {
                return this.caravanStructureGrantedSumInsuredField;
            }
            set {
                this.caravanStructureGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public int CaravanContentsGrantedSumInsured {
            get {
                return this.caravanContentsGrantedSumInsuredField;
            }
            set {
                this.caravanContentsGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public int CaravanGrantedSumInsured {
            get {
                return this.caravanGrantedSumInsuredField;
            }
            set {
                this.caravanGrantedSumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public double HouseStructurePremium {
            get {
                return this.houseStructurePremiumField;
            }
            set {
                this.houseStructurePremiumField = value;
            }
        }
        
        /// <remarks/>
        public double HouseContentsPremium {
            get {
                return this.houseContentsPremiumField;
            }
            set {
                this.houseContentsPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double HousePremium {
            get {
                return this.housePremiumField;
            }
            set {
                this.housePremiumField = value;
            }
        }
        
        /// <remarks/>
        public double SpecifiedAllRisksPremium {
            get {
                return this.specifiedAllRisksPremiumField;
            }
            set {
                this.specifiedAllRisksPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double UnspecifiedAllRisksPremium {
            get {
                return this.unspecifiedAllRisksPremiumField;
            }
            set {
                this.unspecifiedAllRisksPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double SportsEquipmentPremium {
            get {
                return this.sportsEquipmentPremiumField;
            }
            set {
                this.sportsEquipmentPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double PedalCyclesPremium {
            get {
                return this.pedalCyclesPremiumField;
            }
            set {
                this.pedalCyclesPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double SmallCraftPremium {
            get {
                return this.smallCraftPremiumField;
            }
            set {
                this.smallCraftPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double HomeOfficePremium {
            get {
                return this.homeOfficePremiumField;
            }
            set {
                this.homeOfficePremiumField = value;
            }
        }
        
        /// <remarks/>
        public double CaravanStructurePremium {
            get {
                return this.caravanStructurePremiumField;
            }
            set {
                this.caravanStructurePremiumField = value;
            }
        }
        
        /// <remarks/>
        public double CaravanContentsPremium {
            get {
                return this.caravanContentsPremiumField;
            }
            set {
                this.caravanContentsPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double CaravanPremium {
            get {
                return this.caravanPremiumField;
            }
            set {
                this.caravanPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double PolicyHolderAgePercentage {
            get {
                return this.policyHolderAgePercentageField;
            }
            set {
                this.policyHolderAgePercentageField = value;
            }
        }
        
        /// <remarks/>
        public double PolicyHolderAgePremium {
            get {
                return this.policyHolderAgePremiumField;
            }
            set {
                this.policyHolderAgePremiumField = value;
            }
        }
        
        /// <remarks/>
        public double PropertyAgePercentage {
            get {
                return this.propertyAgePercentageField;
            }
            set {
                this.propertyAgePercentageField = value;
            }
        }
        
        /// <remarks/>
        public double PropertyAgePremium {
            get {
                return this.propertyAgePremiumField;
            }
            set {
                this.propertyAgePremiumField = value;
            }
        }
        
        /// <remarks/>
        public double LocksPercentage {
            get {
                return this.locksPercentageField;
            }
            set {
                this.locksPercentageField = value;
            }
        }
        
        /// <remarks/>
        public double LocksPremium {
            get {
                return this.locksPremiumField;
            }
            set {
                this.locksPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double ClaimFreeYearsPercentage {
            get {
                return this.claimFreeYearsPercentageField;
            }
            set {
                this.claimFreeYearsPercentageField = value;
            }
        }
        
        /// <remarks/>
        public double ClaimFreeYearsPremium {
            get {
                return this.claimFreeYearsPremiumField;
            }
            set {
                this.claimFreeYearsPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double AlarmTypePercentage {
            get {
                return this.alarmTypePercentageField;
            }
            set {
                this.alarmTypePercentageField = value;
            }
        }
        
        /// <remarks/>
        public double AlarmTypePremium {
            get {
                return this.alarmTypePremiumField;
            }
            set {
                this.alarmTypePremiumField = value;
            }
        }
        
        /// <remarks/>
        public double HeatingTypePercentage {
            get {
                return this.heatingTypePercentageField;
            }
            set {
                this.heatingTypePercentageField = value;
            }
        }
        
        /// <remarks/>
        public double HeatingTypePremium {
            get {
                return this.heatingTypePremiumField;
            }
            set {
                this.heatingTypePremiumField = value;
            }
        }
        
        /// <remarks/>
        public double SmokeDetectorsPercentage {
            get {
                return this.smokeDetectorsPercentageField;
            }
            set {
                this.smokeDetectorsPercentageField = value;
            }
        }
        
        /// <remarks/>
        public double SmokeDetectorsPremium {
            get {
                return this.smokeDetectorsPremiumField;
            }
            set {
                this.smokeDetectorsPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double HighSumInsuredPercentage {
            get {
                return this.highSumInsuredPercentageField;
            }
            set {
                this.highSumInsuredPercentageField = value;
            }
        }
        
        /// <remarks/>
        public double HighSumInsuredPremium {
            get {
                return this.highSumInsuredPremiumField;
            }
            set {
                this.highSumInsuredPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double DaytimeOccupancyPercentage {
            get {
                return this.daytimeOccupancyPercentageField;
            }
            set {
                this.daytimeOccupancyPercentageField = value;
            }
        }
        
        /// <remarks/>
        public double DaytimeOccupancyPremium {
            get {
                return this.daytimeOccupancyPremiumField;
            }
            set {
                this.daytimeOccupancyPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double NeighbourhoodWatchPercentage {
            get {
                return this.neighbourhoodWatchPercentageField;
            }
            set {
                this.neighbourhoodWatchPercentageField = value;
            }
        }
        
        /// <remarks/>
        public double NeighbourhoodWatchPremium {
            get {
                return this.neighbourhoodWatchPremiumField;
            }
            set {
                this.neighbourhoodWatchPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double CurrentCarInsurerPercentage {
            get {
                return this.currentCarInsurerPercentageField;
            }
            set {
                this.currentCarInsurerPercentageField = value;
            }
        }
        
        /// <remarks/>
        public double CurrentCarInsurerPremium {
            get {
                return this.currentCarInsurerPremiumField;
            }
            set {
                this.currentCarInsurerPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double VoluntaryExcessPercentage {
            get {
                return this.voluntaryExcessPercentageField;
            }
            set {
                this.voluntaryExcessPercentageField = value;
            }
        }
        
        /// <remarks/>
        public double VoluntaryExcessPremium {
            get {
                return this.voluntaryExcessPremiumField;
            }
            set {
                this.voluntaryExcessPremiumField = value;
            }
        }
        
        /// <remarks/>
        public bool HouseStructureIncludesAccidentalDamage {
            get {
                return this.houseStructureIncludesAccidentalDamageField;
            }
            set {
                this.houseStructureIncludesAccidentalDamageField = value;
            }
        }
        
        /// <remarks/>
        public bool HouseContentsIncludesAccidentalDamage {
            get {
                return this.houseContentsIncludesAccidentalDamageField;
            }
            set {
                this.houseContentsIncludesAccidentalDamageField = value;
            }
        }
        
        /// <remarks/>
        public double NetPremium {
            get {
                return this.netPremiumField;
            }
            set {
                this.netPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double GovernmentLevyPercentage {
            get {
                return this.governmentLevyPercentageField;
            }
            set {
                this.governmentLevyPercentageField = value;
            }
        }
        
        /// <remarks/>
        public double GovernmentLevyPremium {
            get {
                return this.governmentLevyPremiumField;
            }
            set {
                this.governmentLevyPremiumField = value;
            }
        }
        
        /// <remarks/>
        public double GrossPremium {
            get {
                return this.grossPremiumField;
            }
            set {
                this.grossPremiumField = value;
            }
        }
        
        /// <remarks/>
        public string DistrictBand {
            get {
                return this.districtBandField;
            }
            set {
                this.districtBandField = value;
            }
        }
        
        /// <remarks/>
        public string DistrictCode {
            get {
                return this.districtCodeField;
            }
            set {
                this.districtCodeField = value;
            }
        }
        
        /// <remarks/>
        public string DistrictTownCode {
            get {
                return this.districtTownCodeField;
            }
            set {
                this.districtTownCodeField = value;
            }
        }
        
        /// <remarks/>
        public string DistrictCountyCode {
            get {
                return this.districtCountyCodeField;
            }
            set {
                this.districtCountyCodeField = value;
            }
        }
        
        /// <remarks/>
        public int PolicyExcess {
            get {
                return this.policyExcessField;
            }
            set {
                this.policyExcessField = value;
            }
        }
        
        /// <remarks/>
        public int VoluntaryExcess {
            get {
                return this.voluntaryExcessField;
            }
            set {
                this.voluntaryExcessField = value;
            }
        }
        
        /// <remarks/>
        public int TotalExcess {
            get {
                return this.totalExcessField;
            }
            set {
                this.totalExcessField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceVersion {
            get {
                return this.serviceVersionField;
            }
            set {
                this.serviceVersionField = value;
            }
        }
        
        /// <remarks/>
        public string SchemeVersion {
            get {
                return this.schemeVersionField;
            }
            set {
                this.schemeVersionField = value;
            }
        }
        
        /// <remarks/>
        public QuoteOutcome Outcome {
            get {
                return this.outcomeField;
            }
            set {
                this.outcomeField = value;
            }
        }
        
        /// <remarks/>
        public string OutcomeReason {
            get {
                return this.outcomeReasonField;
            }
            set {
                this.outcomeReasonField = value;
            }
        }
        
        /// <remarks/>
        public bool IsGuaranteed {
            get {
                return this.isGuaranteedField;
            }
            set {
                this.isGuaranteedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateQuoted {
            get {
                return this.dateQuotedField;
            }
            set {
                this.dateQuotedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CoverEffectiveFrom {
            get {
                return this.coverEffectiveFromField;
            }
            set {
                this.coverEffectiveFromField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CoverEffectiveTo {
            get {
                return this.coverEffectiveToField;
            }
            set {
                this.coverEffectiveToField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateOfRates {
            get {
                return this.dateOfRatesField;
            }
            set {
                this.dateOfRatesField = value;
            }
        }
        
        /// <remarks/>
        public bool IsIndicativePremium {
            get {
                return this.isIndicativePremiumField;
            }
            set {
                this.isIndicativePremiumField = value;
            }
        }
        
        /// <remarks/>
        public string UserPrompt {
            get {
                return this.userPromptField;
            }
            set {
                this.userPromptField = value;
            }
        }
        
        /// <remarks/>
        public bool MinimumPremiumApplied {
            get {
                return this.minimumPremiumAppliedField;
            }
            set {
                this.minimumPremiumAppliedField = value;
            }
        }
        
        /// <remarks/>
        public string InsurerEncryptionPublicKey {
            get {
                return this.insurerEncryptionPublicKeyField;
            }
            set {
                this.insurerEncryptionPublicKeyField = value;
            }
        }
        
        /// <remarks/>
        public string OfficeId {
            get {
                return this.officeIdField;
            }
            set {
                this.officeIdField = value;
            }
        }
        
        /// <remarks/>
        public string QuotationReference {
            get {
                return this.quotationReferenceField;
            }
            set {
                this.quotationReferenceField = value;
            }
        }
        
        /// <remarks/>
        public string BrokerPrimaryAgencyId {
            get {
                return this.brokerPrimaryAgencyIdField;
            }
            set {
                this.brokerPrimaryAgencyIdField = value;
            }
        }
        
        /// <remarks/>
        public string BrokerSecondaryAgencyId {
            get {
                return this.brokerSecondaryAgencyIdField;
            }
            set {
                this.brokerSecondaryAgencyIdField = value;
            }
        }
        
        /// <remarks/>
        public string BrokerTertiaryAgencyId {
            get {
                return this.brokerTertiaryAgencyIdField;
            }
            set {
                this.brokerTertiaryAgencyIdField = value;
            }
        }
        
        /// <remarks/>
        public string InsurerReference {
            get {
                return this.insurerReferenceField;
            }
            set {
                this.insurerReferenceField = value;
            }
        }
        
        /// <remarks/>
        public string InsurerOutput {
            get {
                return this.insurerOutputField;
            }
            set {
                this.insurerOutputField = value;
            }
        }
        
        /// <remarks/>
        public string GeoFloodRisk {
            get {
                return this.geoFloodRiskField;
            }
            set {
                this.geoFloodRiskField = value;
            }
        }
        
        /// <remarks/>
        public string GeoPredictiveFlood {
            get {
                return this.geoPredictiveFloodField;
            }
            set {
                this.geoPredictiveFloodField = value;
            }
        }
        
        /// <remarks/>
        public string GeoNonFlood {
            get {
                return this.geoNonFloodField;
            }
            set {
                this.geoNonFloodField = value;
            }
        }
        
        /// <remarks/>
        public string GeoAntiPeril {
            get {
                return this.geoAntiPerilField;
            }
            set {
                this.geoAntiPerilField = value;
            }
        }
        
        /// <remarks/>
        public string GeoDedScore {
            get {
                return this.geoDedScoreField;
            }
            set {
                this.geoDedScoreField = value;
            }
        }
        
        /// <remarks/>
        public string GeoCrime {
            get {
                return this.geoCrimeField;
            }
            set {
                this.geoCrimeField = value;
            }
        }
        
        /// <remarks/>
        public string GeoSubRisk {
            get {
                return this.geoSubRiskField;
            }
            set {
                this.geoSubRiskField = value;
            }
        }
        
        /// <remarks/>
        public BrokerOverride BrokerOverride {
            get {
                return this.brokerOverrideField;
            }
            set {
                this.brokerOverrideField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class HomeWebServiceResponse {
        
        private string errorDetailsField;
        
        private bool successField;
        
        private HomeQuoteWebServiceResult[] quotesField;
        
        private HomeDocumentWebServiceResult[] documentsField;
        
        private string policyNumberField;
        
        /// <remarks/>
        public string ErrorDetails {
            get {
                return this.errorDetailsField;
            }
            set {
                this.errorDetailsField = value;
            }
        }
        
        /// <remarks/>
        public bool Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public HomeQuoteWebServiceResult[] Quotes {
            get {
                return this.quotesField;
            }
            set {
                this.quotesField = value;
            }
        }
        
        /// <remarks/>
        public HomeDocumentWebServiceResult[] Documents {
            get {
                return this.documentsField;
            }
            set {
                this.documentsField = value;
            }
        }
        
        /// <remarks/>
        public string PolicyNumber {
            get {
                return this.policyNumberField;
            }
            set {
                this.policyNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class InsurerRatingFactor {
        
        private string codeField;
        
        private System.Nullable<System.DateTime> dateField;
        
        private decimal percentageField;
        
        private string ratingActionField;
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public decimal Percentage {
            get {
                return this.percentageField;
            }
            set {
                this.percentageField = value;
            }
        }
        
        /// <remarks/>
        public string RatingAction {
            get {
                return this.ratingActionField;
            }
            set {
                this.ratingActionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class InsurerCredential {
        
        private Insurer insurerField;
        
        private string usernameField;
        
        private string passwordField;
        
        /// <remarks/>
        public Insurer Insurer {
            get {
                return this.insurerField;
            }
            set {
                this.insurerField = value;
            }
        }
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class RiskDetail {
        
        private string descriptionField;
        
        private System.Nullable<System.DateTime> valuationDateField;
        
        private int percentageOfSumInsuredHighValueItemsField;
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ValuationDate {
            get {
                return this.valuationDateField;
            }
            set {
                this.valuationDateField = value;
            }
        }
        
        /// <remarks/>
        public int PercentageOfSumInsuredHighValueItems {
            get {
                return this.percentageOfSumInsuredHighValueItemsField;
            }
            set {
                this.percentageOfSumInsuredHighValueItemsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecifiedRisk))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class Risk {
        
        private RateBreakdownGroup groupField;
        
        private int sumInsuredField;
        
        private RiskDetail detailField;
        
        /// <remarks/>
        public RateBreakdownGroup Group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
        /// <remarks/>
        public int SumInsured {
            get {
                return this.sumInsuredField;
            }
            set {
                this.sumInsuredField = value;
            }
        }
        
        /// <remarks/>
        public RiskDetail Detail {
            get {
                return this.detailField;
            }
            set {
                this.detailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum RateBreakdownGroup : long {
        
        /// <remarks/>
        HouseStructure = 1,
        
        /// <remarks/>
        HouseContents = 2,
        
        /// <remarks/>
        CaravanStructure = 4,
        
        /// <remarks/>
        CaravanContents = 8,
        
        /// <remarks/>
        SmallCraft = 16,
        
        /// <remarks/>
        HomeOffice = 32,
        
        /// <remarks/>
        Unspecified = 64,
        
        /// <remarks/>
        SportsEquipment = 128,
        
        /// <remarks/>
        Camcorder = 256,
        
        /// <remarks/>
        HearingAid = 512,
        
        /// <remarks/>
        Laptop = 1024,
        
        /// <remarks/>
        Mobile = 2048,
        
        /// <remarks/>
        PedalCycle = 4096,
        
        /// <remarks/>
        Jewellery = 8192,
        
        /// <remarks/>
        Furs = 16384,
        
        /// <remarks/>
        Picture = 32768,
        
        /// <remarks/>
        MusicalInstrument = 65536,
        
        /// <remarks/>
        AddOn = 131072,
        
        /// <remarks/>
        Other = 262144,
        
        /// <remarks/>
        ManualDirector = 524288,
        
        /// <remarks/>
        NonManualDirector = 1048576,
        
        /// <remarks/>
        ManualEmployee = 2097152,
        
        /// <remarks/>
        NonManualEmployee = 4194304,
        
        /// <remarks/>
        LabourOnlySubcontractorEmployee = 8388608,
        
        /// <remarks/>
        PublicLiability = 16777216,
        
        /// <remarks/>
        SurveyFee = 33554432,
        
        /// <remarks/>
        BonaFidaSubcontractor = 67108864,
        
        /// <remarks/>
        InsurerFee = 134217728,
        
        /// <remarks/>
        Tablet = 268435456,
        
        /// <remarks/>
        House = 536870912,
        
        /// <remarks/>
        Caravan = 1073741824,
        
        /// <remarks/>
        SpecifiedAllRisk = 2147483648,
        
        /// <remarks/>
        AllRisk = 4294967296,
        
        /// <remarks/>
        All = 8589934592,
        
        /// <remarks/>
        Wage = 17179869184,
        
        /// <remarks/>
        Director = 34359738368,
        
        /// <remarks/>
        EmployersLiability = 68719476736,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class SpecifiedRisk : Risk {
        
        private RiskDetail riskDetailField;
        
        /// <remarks/>
        public RiskDetail RiskDetail {
            get {
                return this.riskDetailField;
            }
            set {
                this.riskDetailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class Caravan {
        
        private string manufacturerField;
        
        private string modelField;
        
        private string typeField;
        
        private int manufacturedYearField;
        
        private string serialNumberField;
        
        private string locationKeptAtField;
        
        private Address siteAddressField;
        
        private string inUseAreaField;
        
        /// <remarks/>
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int ManufacturedYear {
            get {
                return this.manufacturedYearField;
            }
            set {
                this.manufacturedYearField = value;
            }
        }
        
        /// <remarks/>
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        public string LocationKeptAt {
            get {
                return this.locationKeptAtField;
            }
            set {
                this.locationKeptAtField = value;
            }
        }
        
        /// <remarks/>
        public Address SiteAddress {
            get {
                return this.siteAddressField;
            }
            set {
                this.siteAddressField = value;
            }
        }
        
        /// <remarks/>
        public string InUseArea {
            get {
                return this.inUseAreaField;
            }
            set {
                this.inUseAreaField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class Address {
        
        private string buildingNameField;
        
        private string streetNameField;
        
        private string townField;
        
        private string countyField;
        
        private string freeText1Field;
        
        private string freeText2Field;
        
        private string regionField;
        
        private string commaDelimitedAddressStringField;
        
        private AddressMatchResult[] addressMatchResultsField;
        
        /// <remarks/>
        public string BuildingName {
            get {
                return this.buildingNameField;
            }
            set {
                this.buildingNameField = value;
            }
        }
        
        /// <remarks/>
        public string StreetName {
            get {
                return this.streetNameField;
            }
            set {
                this.streetNameField = value;
            }
        }
        
        /// <remarks/>
        public string Town {
            get {
                return this.townField;
            }
            set {
                this.townField = value;
            }
        }
        
        /// <remarks/>
        public string County {
            get {
                return this.countyField;
            }
            set {
                this.countyField = value;
            }
        }
        
        /// <remarks/>
        public string FreeText1 {
            get {
                return this.freeText1Field;
            }
            set {
                this.freeText1Field = value;
            }
        }
        
        /// <remarks/>
        public string FreeText2 {
            get {
                return this.freeText2Field;
            }
            set {
                this.freeText2Field = value;
            }
        }
        
        /// <remarks/>
        public string Region {
            get {
                return this.regionField;
            }
            set {
                this.regionField = value;
            }
        }
        
        /// <remarks/>
        public string CommaDelimitedAddressString {
            get {
                return this.commaDelimitedAddressStringField;
            }
            set {
                this.commaDelimitedAddressStringField = value;
            }
        }
        
        /// <remarks/>
        public AddressMatchResult[] AddressMatchResults {
            get {
                return this.addressMatchResultsField;
            }
            set {
                this.addressMatchResultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class AddressMatchResult {
        
        private AddressLookupProvider providedByField;
        
        private string geoCodeField;
        
        private string matchTypeField;
        
        private string referenceField;
        
        private string matchLevelField;
        
        private bool isFallbackResultField;
        
        private string transactionIdField;
        
        private string lookupResponseField;
        
        /// <remarks/>
        public AddressLookupProvider ProvidedBy {
            get {
                return this.providedByField;
            }
            set {
                this.providedByField = value;
            }
        }
        
        /// <remarks/>
        public string GeoCode {
            get {
                return this.geoCodeField;
            }
            set {
                this.geoCodeField = value;
            }
        }
        
        /// <remarks/>
        public string MatchType {
            get {
                return this.matchTypeField;
            }
            set {
                this.matchTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Reference {
            get {
                return this.referenceField;
            }
            set {
                this.referenceField = value;
            }
        }
        
        /// <remarks/>
        public string MatchLevel {
            get {
                return this.matchLevelField;
            }
            set {
                this.matchLevelField = value;
            }
        }
        
        /// <remarks/>
        public bool IsFallbackResult {
            get {
                return this.isFallbackResultField;
            }
            set {
                this.isFallbackResultField = value;
            }
        }
        
        /// <remarks/>
        public string TransactionId {
            get {
                return this.transactionIdField;
            }
            set {
                this.transactionIdField = value;
            }
        }
        
        /// <remarks/>
        public string LookupResponse {
            get {
                return this.lookupResponseField;
            }
            set {
                this.lookupResponseField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum AddressLookupProvider {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        MapFlow,
        
        /// <remarks/>
        Gamma,
        
        /// <remarks/>
        Aviva,
        
        /// <remarks/>
        AvivaUK,
        
        /// <remarks/>
        InsurerBackBook,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class Business {
        
        private string nameField;
        
        private Address addressField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public Address Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class InterestedParty {
        
        private string branchNameField;
        
        private string ediCodeField;
        
        private string lookupCodeField;
        
        private string sortCodeField;
        
        private int bankTypeField;
        
        private Business businessField;
        
        /// <remarks/>
        public string BranchName {
            get {
                return this.branchNameField;
            }
            set {
                this.branchNameField = value;
            }
        }
        
        /// <remarks/>
        public string EdiCode {
            get {
                return this.ediCodeField;
            }
            set {
                this.ediCodeField = value;
            }
        }
        
        /// <remarks/>
        public string LookupCode {
            get {
                return this.lookupCodeField;
            }
            set {
                this.lookupCodeField = value;
            }
        }
        
        /// <remarks/>
        public string SortCode {
            get {
                return this.sortCodeField;
            }
            set {
                this.sortCodeField = value;
            }
        }
        
        /// <remarks/>
        public int BankType {
            get {
                return this.bankTypeField;
            }
            set {
                this.bankTypeField = value;
            }
        }
        
        /// <remarks/>
        public Business Business {
            get {
                return this.businessField;
            }
            set {
                this.businessField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class Alarm {
        
        private AlarmType alarmTypeField;
        
        /// <remarks/>
        public AlarmType AlarmType {
            get {
                return this.alarmTypeField;
            }
            set {
                this.alarmTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum AlarmType {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        NSAIApprovedInstallerAlarmStandardToCentralStation,
        
        /// <remarks/>
        NSAIApprovedInstallerAlarmStandard,
        
        /// <remarks/>
        InstalledToStandardAlarmToCentralStation,
        
        /// <remarks/>
        InstalledToStandardAlarm,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class Building {
        
        private PropertyType propertyTypeField;
        
        private PropertySubType propertySubTypeField;
        
        private System.Nullable<System.DateTime> constructionDateField;
        
        private bool listedBuildingField;
        
        private RoofConstructionType roofConstructionField;
        
        private WallConstructionType wallConstructionField;
        
        private int roofPercentageField;
        
        private int numberOfBedroomsField;
        
        private int numberOfBathroomsField;
        
        private int numberOfSmokeDetectorsField;
        
        private Alarm alarmField;
        
        private bool locksField;
        
        private bool neighbourhoodWatchInAreaField;
        
        private bool basementField;
        
        private HeatingType heatingTypeField;
        
        private int buildingSizeField;
        
        private UnitOfMeasurement buildingSizeUnitOfMeasurementField;
        
        private int garageSizeField;
        
        private UnitOfMeasurement garageSizeUnitOfMeasurementField;
        
        private System.Nullable<bool> freeFromFloodingField;
        
        private System.Nullable<bool> freeFromGroundHeaveField;
        
        private System.Nullable<bool> freeFromLandslipField;
        
        private System.Nullable<bool> freeFromSubsidenceField;
        
        private System.Nullable<bool> goodRepairField;
        
        private System.Nullable<bool> safeInstalledField;
        
        private System.Nullable<bool> undertakeToMaintainField;
        
        /// <remarks/>
        public PropertyType PropertyType {
            get {
                return this.propertyTypeField;
            }
            set {
                this.propertyTypeField = value;
            }
        }
        
        /// <remarks/>
        public PropertySubType PropertySubType {
            get {
                return this.propertySubTypeField;
            }
            set {
                this.propertySubTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ConstructionDate {
            get {
                return this.constructionDateField;
            }
            set {
                this.constructionDateField = value;
            }
        }
        
        /// <remarks/>
        public bool ListedBuilding {
            get {
                return this.listedBuildingField;
            }
            set {
                this.listedBuildingField = value;
            }
        }
        
        /// <remarks/>
        public RoofConstructionType RoofConstruction {
            get {
                return this.roofConstructionField;
            }
            set {
                this.roofConstructionField = value;
            }
        }
        
        /// <remarks/>
        public WallConstructionType WallConstruction {
            get {
                return this.wallConstructionField;
            }
            set {
                this.wallConstructionField = value;
            }
        }
        
        /// <remarks/>
        public int RoofPercentage {
            get {
                return this.roofPercentageField;
            }
            set {
                this.roofPercentageField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfBedrooms {
            get {
                return this.numberOfBedroomsField;
            }
            set {
                this.numberOfBedroomsField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfBathrooms {
            get {
                return this.numberOfBathroomsField;
            }
            set {
                this.numberOfBathroomsField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfSmokeDetectors {
            get {
                return this.numberOfSmokeDetectorsField;
            }
            set {
                this.numberOfSmokeDetectorsField = value;
            }
        }
        
        /// <remarks/>
        public Alarm Alarm {
            get {
                return this.alarmField;
            }
            set {
                this.alarmField = value;
            }
        }
        
        /// <remarks/>
        public bool Locks {
            get {
                return this.locksField;
            }
            set {
                this.locksField = value;
            }
        }
        
        /// <remarks/>
        public bool NeighbourhoodWatchInArea {
            get {
                return this.neighbourhoodWatchInAreaField;
            }
            set {
                this.neighbourhoodWatchInAreaField = value;
            }
        }
        
        /// <remarks/>
        public bool Basement {
            get {
                return this.basementField;
            }
            set {
                this.basementField = value;
            }
        }
        
        /// <remarks/>
        public HeatingType HeatingType {
            get {
                return this.heatingTypeField;
            }
            set {
                this.heatingTypeField = value;
            }
        }
        
        /// <remarks/>
        public int BuildingSize {
            get {
                return this.buildingSizeField;
            }
            set {
                this.buildingSizeField = value;
            }
        }
        
        /// <remarks/>
        public UnitOfMeasurement BuildingSizeUnitOfMeasurement {
            get {
                return this.buildingSizeUnitOfMeasurementField;
            }
            set {
                this.buildingSizeUnitOfMeasurementField = value;
            }
        }
        
        /// <remarks/>
        public int GarageSize {
            get {
                return this.garageSizeField;
            }
            set {
                this.garageSizeField = value;
            }
        }
        
        /// <remarks/>
        public UnitOfMeasurement GarageSizeUnitOfMeasurement {
            get {
                return this.garageSizeUnitOfMeasurementField;
            }
            set {
                this.garageSizeUnitOfMeasurementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> FreeFromFlooding {
            get {
                return this.freeFromFloodingField;
            }
            set {
                this.freeFromFloodingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> FreeFromGroundHeave {
            get {
                return this.freeFromGroundHeaveField;
            }
            set {
                this.freeFromGroundHeaveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> FreeFromLandslip {
            get {
                return this.freeFromLandslipField;
            }
            set {
                this.freeFromLandslipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> FreeFromSubsidence {
            get {
                return this.freeFromSubsidenceField;
            }
            set {
                this.freeFromSubsidenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> GoodRepair {
            get {
                return this.goodRepairField;
            }
            set {
                this.goodRepairField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> SafeInstalled {
            get {
                return this.safeInstalledField;
            }
            set {
                this.safeInstalledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> UndertakeToMaintain {
            get {
                return this.undertakeToMaintainField;
            }
            set {
                this.undertakeToMaintainField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum PropertyType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        DetachedHouse,
        
        /// <remarks/>
        SemiDetachedHouse,
        
        /// <remarks/>
        Bungalow,
        
        /// <remarks/>
        TerracedHouse,
        
        /// <remarks/>
        PurposeBuiltApartment,
        
        /// <remarks/>
        Flat,
        
        /// <remarks/>
        Maisonette,
        
        /// <remarks/>
        CountryMansion,
        
        /// <remarks/>
        FarmHouse,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum PropertySubType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Bungalow,
        
        /// <remarks/>
        MidTerraceBungalow,
        
        /// <remarks/>
        EndTerraceBungalow,
        
        /// <remarks/>
        Detached,
        
        /// <remarks/>
        ThreeOrMoreStoriedHouse,
        
        /// <remarks/>
        FlatGroundFloor,
        
        /// <remarks/>
        Maisonette,
        
        /// <remarks/>
        Apartment,
        
        /// <remarks/>
        GroundFloorApartment,
        
        /// <remarks/>
        SemiDetached,
        
        /// <remarks/>
        Terraced,
        
        /// <remarks/>
        EndTerraceHouse,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        DetachedBungalow,
        
        /// <remarks/>
        SemiDetachedBungalow,
        
        /// <remarks/>
        TerracedBungalow,
        
        /// <remarks/>
        DetachedHouse,
        
        /// <remarks/>
        SemiDetachedHouse,
        
        /// <remarks/>
        TerracedHouse,
        
        /// <remarks/>
        FlatInABlockOfFlats,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum RoofConstructionType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Asbestos,
        
        /// <remarks/>
        Asphalt,
        
        /// <remarks/>
        CorrugatedIron,
        
        /// <remarks/>
        FeltOnTimber,
        
        /// <remarks/>
        FibreGlass,
        
        /// <remarks/>
        Glass,
        
        /// <remarks/>
        Metal,
        
        /// <remarks/>
        Plastic,
        
        /// <remarks/>
        Shingle,
        
        /// <remarks/>
        Standard,
        
        /// <remarks/>
        Stramit,
        
        /// <remarks/>
        ThatchFibre,
        
        /// <remarks/>
        ThatchReed,
        
        /// <remarks/>
        Timber,
        
        /// <remarks/>
        Turnerised,
        
        /// <remarks/>
        WoodworkConstruction,
        
        /// <remarks/>
        NotListed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum WallConstructionType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Asbestos,
        
        /// <remarks/>
        Brick,
        
        /// <remarks/>
        BrickOrTimberFrame,
        
        /// <remarks/>
        Cob,
        
        /// <remarks/>
        Concrete,
        
        /// <remarks/>
        CorrugatedIron,
        
        /// <remarks/>
        Essex,
        
        /// <remarks/>
        Fibreglass,
        
        /// <remarks/>
        Flint,
        
        /// <remarks/>
        Glass,
        
        /// <remarks/>
        Metal,
        
        /// <remarks/>
        Plastic,
        
        /// <remarks/>
        PrefabricatedBuildingCombustibleMaterials,
        
        /// <remarks/>
        PrefabricatedBuildingNonCombustibleMaterials,
        
        /// <remarks/>
        Standard,
        
        /// <remarks/>
        Stone,
        
        /// <remarks/>
        Stramit,
        
        /// <remarks/>
        Timber,
        
        /// <remarks/>
        TimberFrame,
        
        /// <remarks/>
        TimberOrPlaster,
        
        /// <remarks/>
        WattleAndDaub,
        
        /// <remarks/>
        Woodwall,
        
        /// <remarks/>
        Woodwork,
        
        /// <remarks/>
        NotListed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum HeatingType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        SolidFuel,
        
        /// <remarks/>
        Electric,
        
        /// <remarks/>
        Gas,
        
        /// <remarks/>
        Oil,
        
        /// <remarks/>
        MixtureIncOil,
        
        /// <remarks/>
        SolarWind,
        
        /// <remarks/>
        Woodchip,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum UnitOfMeasurement {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        SquareMetres,
        
        /// <remarks/>
        SquareFeet,
        
        /// <remarks/>
        Miles,
        
        /// <remarks/>
        Kilometres,
        
        /// <remarks/>
        Metres,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class Occupancy {
        
        private ResidenceType residenceTypeField;
        
        private ProposerType proposerTypeField;
        
        private int yearsLivingAtAddressField;
        
        private int numberOfPayingGuestsField;
        
        private bool socialWelfareLetField;
        
        private bool isFurnishedField;
        
        private bool normalDaytimeOccupancyField;
        
        private int numberOfDaysUnoccupiedPerWeekField;
        
        private int numberOfTimesLetInAYearField;
        
        /// <remarks/>
        public ResidenceType ResidenceType {
            get {
                return this.residenceTypeField;
            }
            set {
                this.residenceTypeField = value;
            }
        }
        
        /// <remarks/>
        public ProposerType ProposerType {
            get {
                return this.proposerTypeField;
            }
            set {
                this.proposerTypeField = value;
            }
        }
        
        /// <remarks/>
        public int YearsLivingAtAddress {
            get {
                return this.yearsLivingAtAddressField;
            }
            set {
                this.yearsLivingAtAddressField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfPayingGuests {
            get {
                return this.numberOfPayingGuestsField;
            }
            set {
                this.numberOfPayingGuestsField = value;
            }
        }
        
        /// <remarks/>
        public bool SocialWelfareLet {
            get {
                return this.socialWelfareLetField;
            }
            set {
                this.socialWelfareLetField = value;
            }
        }
        
        /// <remarks/>
        public bool IsFurnished {
            get {
                return this.isFurnishedField;
            }
            set {
                this.isFurnishedField = value;
            }
        }
        
        /// <remarks/>
        public bool NormalDaytimeOccupancy {
            get {
                return this.normalDaytimeOccupancyField;
            }
            set {
                this.normalDaytimeOccupancyField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfDaysUnoccupiedPerWeek {
            get {
                return this.numberOfDaysUnoccupiedPerWeekField;
            }
            set {
                this.numberOfDaysUnoccupiedPerWeekField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfTimesLetInAYear {
            get {
                return this.numberOfTimesLetInAYearField;
            }
            set {
                this.numberOfTimesLetInAYearField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum ResidenceType {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        Unoccupied,
        
        /// <remarks/>
        CaravanFamilyUse,
        
        /// <remarks/>
        CaravanLetOut,
        
        /// <remarks/>
        CourseOfConstruction,
        
        /// <remarks/>
        HolidayHomeFamilyUse,
        
        /// <remarks/>
        HolidayHomeLetOut,
        
        /// <remarks/>
        MobileHomeFamilyUse,
        
        /// <remarks/>
        MobileHomeLetOut,
        
        /// <remarks/>
        OwnerOccupied,
        
        /// <remarks/>
        RentedCouple,
        
        /// <remarks/>
        RentedFamily,
        
        /// <remarks/>
        RentedStudents,
        
        /// <remarks/>
        RentedOnePerson,
        
        /// <remarks/>
        RentedTwoPeople,
        
        /// <remarks/>
        RentedThreePeople,
        
        /// <remarks/>
        RentedFourPeople,
        
        /// <remarks/>
        RentedFivePeople,
        
        /// <remarks/>
        RentedSixPeople,
        
        /// <remarks/>
        RentedSevenPeople,
        
        /// <remarks/>
        RentedEightPeople,
        
        /// <remarks/>
        RentedNinePeople,
        
        /// <remarks/>
        RentedTenPeople,
        
        /// <remarks/>
        LogCabinHolidayHome,
        
        /// <remarks/>
        LogCabinLetOut,
        
        /// <remarks/>
        LogCabinOwnerOccupied,
        
        /// <remarks/>
        MainResidenceAwaitingOccupancy,
        
        /// <remarks/>
        LogCabinHolidayHomeLet,
        
        /// <remarks/>
        LogCabinPermanentlyLetOut,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum ProposerType {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        Landlord,
        
        /// <remarks/>
        Tenant,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class PolicyHolder {
        
        private bool effectivePrimaryPolicyHolderField;
        
        private OccupationType occupationTypeField;
        
        private EmployersBusinessType employersBusinessTypeField;
        
        private ProfessionalBodyType professionalBodyTypeField;
        
        private MaritalStatus maritalStatusField;
        
        private EmploymentType employmentTypeField;
        
        private bool firstTimeBuyerField;
        
        private System.Nullable<bool> smokerField;
        
        private System.Nullable<bool> cancelledField;
        
        private System.Nullable<bool> declinedField;
        
        private System.Nullable<bool> convictionField;
        
        private System.Nullable<bool> declaredBankruptField;
        
        private System.Nullable<bool> specialConditionsField;
        
        private RelationshipType relationshipField;
        
        private Contact contactField;
        
        /// <remarks/>
        public bool EffectivePrimaryPolicyHolder {
            get {
                return this.effectivePrimaryPolicyHolderField;
            }
            set {
                this.effectivePrimaryPolicyHolderField = value;
            }
        }
        
        /// <remarks/>
        public OccupationType OccupationType {
            get {
                return this.occupationTypeField;
            }
            set {
                this.occupationTypeField = value;
            }
        }
        
        /// <remarks/>
        public EmployersBusinessType EmployersBusinessType {
            get {
                return this.employersBusinessTypeField;
            }
            set {
                this.employersBusinessTypeField = value;
            }
        }
        
        /// <remarks/>
        public ProfessionalBodyType ProfessionalBodyType {
            get {
                return this.professionalBodyTypeField;
            }
            set {
                this.professionalBodyTypeField = value;
            }
        }
        
        /// <remarks/>
        public MaritalStatus MaritalStatus {
            get {
                return this.maritalStatusField;
            }
            set {
                this.maritalStatusField = value;
            }
        }
        
        /// <remarks/>
        public EmploymentType EmploymentType {
            get {
                return this.employmentTypeField;
            }
            set {
                this.employmentTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool FirstTimeBuyer {
            get {
                return this.firstTimeBuyerField;
            }
            set {
                this.firstTimeBuyerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> Smoker {
            get {
                return this.smokerField;
            }
            set {
                this.smokerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> Cancelled {
            get {
                return this.cancelledField;
            }
            set {
                this.cancelledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> Declined {
            get {
                return this.declinedField;
            }
            set {
                this.declinedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> Conviction {
            get {
                return this.convictionField;
            }
            set {
                this.convictionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> DeclaredBankrupt {
            get {
                return this.declaredBankruptField;
            }
            set {
                this.declaredBankruptField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> SpecialConditions {
            get {
                return this.specialConditionsField;
            }
            set {
                this.specialConditionsField = value;
            }
        }
        
        /// <remarks/>
        public RelationshipType Relationship {
            get {
                return this.relationshipField;
            }
            set {
                this.relationshipField = value;
            }
        }
        
        /// <remarks/>
        public Contact Contact {
            get {
                return this.contactField;
            }
            set {
                this.contactField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum OccupationType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        AbattoirWorker,
        
        /// <remarks/>
        AccommodationOfficer,
        
        /// <remarks/>
        AccountExecutive,
        
        /// <remarks/>
        AccountManager,
        
        /// <remarks/>
        Accountant,
        
        /// <remarks/>
        AccountantCharteredOrCertified,
        
        /// <remarks/>
        AccountsAssistant,
        
        /// <remarks/>
        AccountsClerk,
        
        /// <remarks/>
        AccountsManager,
        
        /// <remarks/>
        AccountsStaff,
        
        /// <remarks/>
        AcousticEngineer,
        
        /// <remarks/>
        Actor,
        
        /// <remarks/>
        ActorOrActress,
        
        /// <remarks/>
        Actress,
        
        /// <remarks/>
        Actuary,
        
        /// <remarks/>
        Acupuncturist,
        
        /// <remarks/>
        AdministrationAssistant,
        
        /// <remarks/>
        AdministrationClerk,
        
        /// <remarks/>
        AdministrationManager,
        
        /// <remarks/>
        AdministrationStaff,
        
        /// <remarks/>
        Administrator,
        
        /// <remarks/>
        AdvertisingAgent,
        
        /// <remarks/>
        AdvertisingAssistant,
        
        /// <remarks/>
        AdvertisingClerk,
        
        /// <remarks/>
        AdvertisingContractor,
        
        /// <remarks/>
        AdvertisingExecutive,
        
        /// <remarks/>
        AdvertisingManager,
        
        /// <remarks/>
        AdvertisingStaff,
        
        /// <remarks/>
        AerialErector,
        
        /// <remarks/>
        AerobicOrKeepFitInstructor,
        
        /// <remarks/>
        AerobicInstructor,
        
        /// <remarks/>
        AeronauticalEngineer,
        
        /// <remarks/>
        Agister,
        
        /// <remarks/>
        AgriculturalConsultant,
        
        /// <remarks/>
        AgriculturalContractor,
        
        /// <remarks/>
        AgriculturalEngineer,
        
        /// <remarks/>
        AgriculturalMerchant,
        
        /// <remarks/>
        AgriculturalWorker,
        
        /// <remarks/>
        Agronomist,
        
        /// <remarks/>
        AirCorps,
        
        /// <remarks/>
        AirForceNcoOrCommissionedOfficer,
        
        /// <remarks/>
        AirForceOtherRanks,
        
        /// <remarks/>
        AirTrafficController,
        
        /// <remarks/>
        AircraftCabinCrew,
        
        /// <remarks/>
        AircraftFlightDeckCrew,
        
        /// <remarks/>
        AircraftBuyer,
        
        /// <remarks/>
        AircraftDesigner,
        
        /// <remarks/>
        AircraftEngineer,
        
        /// <remarks/>
        AircraftMaintenanceEngineer,
        
        /// <remarks/>
        AircraftSurfaceFinisher,
        
        /// <remarks/>
        AirlineCheckInStaff,
        
        /// <remarks/>
        AirlineEmployeeAirport,
        
        /// <remarks/>
        AirlineEmployeeNonAirport,
        
        /// <remarks/>
        AirlineIndustryEmployee,
        
        /// <remarks/>
        AirlineStaff,
        
        /// <remarks/>
        Airman,
        
        /// <remarks/>
        AirportController,
        
        /// <remarks/>
        AirportGroundstaff,
        
        /// <remarks/>
        AirportMaintenanceStaff,
        
        /// <remarks/>
        AirportManager,
        
        /// <remarks/>
        AirportPolice,
        
        /// <remarks/>
        AlarmInstaller,
        
        /// <remarks/>
        Almoner,
        
        /// <remarks/>
        AmbulanceController,
        
        /// <remarks/>
        AmbulanceCrew,
        
        /// <remarks/>
        AmbulanceDriver,
        
        /// <remarks/>
        AmusementArcadeOwner,
        
        /// <remarks/>
        AmusementArcadeWorker,
        
        /// <remarks/>
        Anaesthetist,
        
        /// <remarks/>
        AnalyticalChemist,
        
        /// <remarks/>
        AnimalBreeder,
        
        /// <remarks/>
        AnimalTrainer,
        
        /// <remarks/>
        Anthropologist,
        
        /// <remarks/>
        AntiqueDealer,
        
        /// <remarks/>
        ApplicationsEngineer,
        
        /// <remarks/>
        ApplicationsProgrammer,
        
        /// <remarks/>
        Aquarist,
        
        /// <remarks/>
        Arbitrator,
        
        /// <remarks/>
        Arborist,
        
        /// <remarks/>
        Archaeologist,
        
        /// <remarks/>
        Architect,
        
        /// <remarks/>
        ArchitectsTechnician,
        
        /// <remarks/>
        ArchitecturalSurveyor,
        
        /// <remarks/>
        Archivist,
        
        /// <remarks/>
        AreaManager,
        
        /// <remarks/>
        Armourer,
        
        /// <remarks/>
        ArmyNcoOrCommissionedOfficer,
        
        /// <remarks/>
        ArmyOtherRanks,
        
        /// <remarks/>
        ArmyOrArmedForces,
        
        /// <remarks/>
        Aromatherapist,
        
        /// <remarks/>
        ArtCritic,
        
        /// <remarks/>
        ArtDealer,
        
        /// <remarks/>
        ArtHistorian,
        
        /// <remarks/>
        ArtRestorer,
        
        /// <remarks/>
        Artexer,
        
        /// <remarks/>
        ArticledClerk,
        
        /// <remarks/>
        ArtificialInseminator,
        
        /// <remarks/>
        ArtificialLimbFitter,
        
        /// <remarks/>
        Artist,
        
        /// <remarks/>
        AsbestosRemover,
        
        /// <remarks/>
        Asphalter,
        
        /// <remarks/>
        AsphalterOrRoadworker,
        
        /// <remarks/>
        AssemblyWorker,
        
        /// <remarks/>
        Assessor,
        
        /// <remarks/>
        AssistantAccountsManager,
        
        /// <remarks/>
        AssistantCaretaker,
        
        /// <remarks/>
        AssistantCook,
        
        /// <remarks/>
        AssistantManager,
        
        /// <remarks/>
        AssistantNurse,
        
        /// <remarks/>
        AssistantTeacher,
        
        /// <remarks/>
        Astrologer,
        
        /// <remarks/>
        Astronomer,
        
        /// <remarks/>
        AuPair,
        
        /// <remarks/>
        AuctionWorker,
        
        /// <remarks/>
        Auctioneer,
        
        /// <remarks/>
        Audiologist,
        
        /// <remarks/>
        AuditClerk,
        
        /// <remarks/>
        AuditManager,
        
        /// <remarks/>
        Auditor,
        
        /// <remarks/>
        Author,
        
        /// <remarks/>
        AutoElectrician,
        
        /// <remarks/>
        AuxiliaryNurse,
        
        /// <remarks/>
        BaconCurer,
        
        /// <remarks/>
        BaggageHandler,
        
        /// <remarks/>
        Bailiff,
        
        /// <remarks/>
        Baker,
        
        /// <remarks/>
        BakeryAssistant,
        
        /// <remarks/>
        BakeryManager,
        
        /// <remarks/>
        BakeryOperator,
        
        /// <remarks/>
        Balloonist,
        
        /// <remarks/>
        BankClerk,
        
        /// <remarks/>
        BankManager,
        
        /// <remarks/>
        BankMessenger,
        
        /// <remarks/>
        BankNoteChecker,
        
        /// <remarks/>
        BankPersonnel,
        
        /// <remarks/>
        BankStaff,
        
        /// <remarks/>
        BaptistMinister,
        
        /// <remarks/>
        BarManager,
        
        /// <remarks/>
        BarStaff,
        
        /// <remarks/>
        BarSteward,
        
        /// <remarks/>
        Barber,
        
        /// <remarks/>
        Barmaid,
        
        /// <remarks/>
        Barman,
        
        /// <remarks/>
        Barrister,
        
        /// <remarks/>
        BbcEmployeeClerical,
        
        /// <remarks/>
        BbcStageMover,
        
        /// <remarks/>
        Beautician,
        
        /// <remarks/>
        BeautyTherapist,
        
        /// <remarks/>
        BettingShopClerk,
        
        /// <remarks/>
        BettingShopEmployee,
        
        /// <remarks/>
        BettingShopOwner,
        
        /// <remarks/>
        BillPoster,
        
        /// <remarks/>
        BingoCaller,
        
        /// <remarks/>
        BingoHallStaff,
        
        /// <remarks/>
        Biochemist,
        
        /// <remarks/>
        Biologist,
        
        /// <remarks/>
        Blacksmith,
        
        /// <remarks/>
        BlindAssembler,
        
        /// <remarks/>
        BlindFitter,
        
        /// <remarks/>
        BlindsInstaller,
        
        /// <remarks/>
        BoatBuilder,
        
        /// <remarks/>
        BodyFitter,
        
        /// <remarks/>
        Bodyguard,
        
        /// <remarks/>
        BodyshopManager,
        
        /// <remarks/>
        BoilerMaker,
        
        /// <remarks/>
        BoilerMan,
        
        /// <remarks/>
        BookBinder,
        
        /// <remarks/>
        BookSeller,
        
        /// <remarks/>
        BookingAgent,
        
        /// <remarks/>
        BookingClerk,
        
        /// <remarks/>
        BookingOfficeClerk,
        
        /// <remarks/>
        BookKeeper,
        
        /// <remarks/>
        BookmakerOffCourse,
        
        /// <remarks/>
        Botanist,
        
        /// <remarks/>
        BoxMaker,
        
        /// <remarks/>
        BoxOfficeClerk,
        
        /// <remarks/>
        BranchManager,
        
        /// <remarks/>
        Breadman,
        
        /// <remarks/>
        Breeder,
        
        /// <remarks/>
        Brewer,
        
        /// <remarks/>
        BreweryManager,
        
        /// <remarks/>
        BreweryWorker,
        
        /// <remarks/>
        Bricklayer,
        
        /// <remarks/>
        Broadcaster,
        
        /// <remarks/>
        BroadcasterTvOrRadio,
        
        /// <remarks/>
        BroadcastingEngineer,
        
        /// <remarks/>
        Builder,
        
        /// <remarks/>
        BuilderMerchant,
        
        /// <remarks/>
        BuildersLabourer,
        
        /// <remarks/>
        BuildersMerchant,
        
        /// <remarks/>
        BuildingAdvisor,
        
        /// <remarks/>
        BuildingContractor,
        
        /// <remarks/>
        BuildingControlOfficer,
        
        /// <remarks/>
        BuildingEngineer,
        
        /// <remarks/>
        BuildingEstimator,
        
        /// <remarks/>
        BuildingForeman,
        
        /// <remarks/>
        BuildingInspector,
        
        /// <remarks/>
        BuildingManager,
        
        /// <remarks/>
        BuildingSiteInspector,
        
        /// <remarks/>
        BuildingSocietyAgent,
        
        /// <remarks/>
        BuildingSocietyClerk,
        
        /// <remarks/>
        BuildingSocietyStaff,
        
        /// <remarks/>
        BuildingSurveyor,
        
        /// <remarks/>
        Bursar,
        
        /// <remarks/>
        BusCompanyEmployee,
        
        /// <remarks/>
        BusConductor,
        
        /// <remarks/>
        BusDriver,
        
        /// <remarks/>
        BusMechanic,
        
        /// <remarks/>
        BusValeter,
        
        /// <remarks/>
        BusinessAnalyst,
        
        /// <remarks/>
        BusinessConsultant,
        
        /// <remarks/>
        BusinessProprietor,
        
        /// <remarks/>
        BusinessProprietorLicensedPremises,
        
        /// <remarks/>
        Butcher,
        
        /// <remarks/>
        ButcheryManager,
        
        /// <remarks/>
        Butler,
        
        /// <remarks/>
        Buyer,
        
        /// <remarks/>
        CieEmployee,
        
        /// <remarks/>
        CabinetMaker,
        
        /// <remarks/>
        CableContractor,
        
        /// <remarks/>
        CableJointer,
        
        /// <remarks/>
        CableTvInstaller,
        
        /// <remarks/>
        CafeOwner,
        
        /// <remarks/>
        CafeStaff,
        
        /// <remarks/>
        CafeWorker,
        
        /// <remarks/>
        CalibrationManager,
        
        /// <remarks/>
        CallCentreAgent,
        
        /// <remarks/>
        CallCentreManager,
        
        /// <remarks/>
        CallCentreStaff,
        
        /// <remarks/>
        Calligrapher,
        
        /// <remarks/>
        CameraRepairer,
        
        /// <remarks/>
        Cameraman,
        
        /// <remarks/>
        CameramanTvOrFilms,
        
        /// <remarks/>
        CanalBoatBroker,
        
        /// <remarks/>
        CarBodyRepairer,
        
        /// <remarks/>
        CarBuilder,
        
        /// <remarks/>
        CarDealer,
        
        /// <remarks/>
        CarDeliveryDriver,
        
        /// <remarks/>
        CarParkAttendant,
        
        /// <remarks/>
        CarSalesman,
        
        /// <remarks/>
        CarValet,
        
        /// <remarks/>
        CarWashAttendant,
        
        /// <remarks/>
        CareAssistant,
        
        /// <remarks/>
        CareManager,
        
        /// <remarks/>
        CareSupervisor,
        
        /// <remarks/>
        CareersAdvisor,
        
        /// <remarks/>
        CareersOfficer,
        
        /// <remarks/>
        CarerNonProfessional,
        
        /// <remarks/>
        CarerProfessional,
        
        /// <remarks/>
        Caretaker,
        
        /// <remarks/>
        CargoOperator,
        
        /// <remarks/>
        Carpenter,
        
        /// <remarks/>
        CarpentersAssistant,
        
        /// <remarks/>
        CarpetCleaner,
        
        /// <remarks/>
        CarpetFitter,
        
        /// <remarks/>
        CarpetRetailer,
        
        /// <remarks/>
        Carpetfitter,
        
        /// <remarks/>
        CarphoneFitter,
        
        /// <remarks/>
        Cartographer,
        
        /// <remarks/>
        Cartoonist,
        
        /// <remarks/>
        CashPointFitter,
        
        /// <remarks/>
        Cashier,
        
        /// <remarks/>
        CasualWorker,
        
        /// <remarks/>
        Caterer,
        
        /// <remarks/>
        CatererMobile,
        
        /// <remarks/>
        CateringConsultant,
        
        /// <remarks/>
        CateringManager,
        
        /// <remarks/>
        CateringStaff,
        
        /// <remarks/>
        CateringTradeLicensed,
        
        /// <remarks/>
        Caulker,
        
        /// <remarks/>
        CeilingContractor,
        
        /// <remarks/>
        CeilingFixer,
        
        /// <remarks/>
        Cellarman,
        
        /// <remarks/>
        CentreLatheOperator,
        
        /// <remarks/>
        CertifiedAccountant,
        
        /// <remarks/>
        Chambermaid,
        
        /// <remarks/>
        Chandler,
        
        /// <remarks/>
        Chaplain,
        
        /// <remarks/>
        ChargeHand,
        
        /// <remarks/>
        CharityWorker,
        
        /// <remarks/>
        CharteredAccountant,
        
        /// <remarks/>
        CharteredEngineer,
        
        /// <remarks/>
        CharteredSurveyor,
        
        /// <remarks/>
        CharteredValuer,
        
        /// <remarks/>
        Charterer,
        
        /// <remarks/>
        Chauffeur,
        
        /// <remarks/>
        CheckOutAssistant,
        
        /// <remarks/>
        CheckoutClerk,
        
        /// <remarks/>
        Chef,
        
        /// <remarks/>
        ChefLicencedPremises,
        
        /// <remarks/>
        ChemicalEngineer,
        
        /// <remarks/>
        Chemist,
        
        /// <remarks/>
        ChickenChaser,
        
        /// <remarks/>
        ChickenSexer,
        
        /// <remarks/>
        ChiefCashier,
        
        /// <remarks/>
        ChiefChemist,
        
        /// <remarks/>
        ChiefExecutive,
        
        /// <remarks/>
        ChildMinder,
        
        /// <remarks/>
        Childminder,
        
        /// <remarks/>
        ChildrensEntertainer,
        
        /// <remarks/>
        ChimneySweep,
        
        /// <remarks/>
        ChinaRestorer,
        
        /// <remarks/>
        Chiropodist,
        
        /// <remarks/>
        Chiropractor,
        
        /// <remarks/>
        Choreographer,
        
        /// <remarks/>
        ChurchOfficer,
        
        /// <remarks/>
        ChurchWarden,
        
        /// <remarks/>
        CinemaAssistant,
        
        /// <remarks/>
        CinemaManager,
        
        /// <remarks/>
        CircusProprietor,
        
        /// <remarks/>
        CircusWorker,
        
        /// <remarks/>
        CivilEngineer,
        
        /// <remarks/>
        CivilServant,
        
        /// <remarks/>
        ClaimsAdjuster,
        
        /// <remarks/>
        ClaimsAdjustor,
        
        /// <remarks/>
        ClaimsAssessor,
        
        /// <remarks/>
        ClaimsManager,
        
        /// <remarks/>
        ClaimsOrLossAdjustor,
        
        /// <remarks/>
        Clairvoyant,
        
        /// <remarks/>
        ClassicalMusician,
        
        /// <remarks/>
        ClassroomAide,
        
        /// <remarks/>
        ClayPigeonInstructor,
        
        /// <remarks/>
        Cleaner,
        
        /// <remarks/>
        CleaningContractor,
        
        /// <remarks/>
        CleaningSupervisor,
        
        /// <remarks/>
        Clergy,
        
        /// <remarks/>
        Clergyman,
        
        /// <remarks/>
        Cleric,
        
        /// <remarks/>
        ClericalAssistant,
        
        /// <remarks/>
        ClericalOfficer,
        
        /// <remarks/>
        Clerk,
        
        /// <remarks/>
        ClerkOfWorks,
        
        /// <remarks/>
        ClinicalPsychologist,
        
        /// <remarks/>
        ClockMaker,
        
        /// <remarks/>
        ClubSteward,
        
        /// <remarks/>
        Coach,
        
        /// <remarks/>
        CoachBuilder,
        
        /// <remarks/>
        CoachDriver,
        
        /// <remarks/>
        CoachSprayer,
        
        /// <remarks/>
        CoalMerchant,
        
        /// <remarks/>
        Coastguard,
        
        /// <remarks/>
        Cobbler,
        
        /// <remarks/>
        CoffeeMerchant,
        
        /// <remarks/>
        CoinDealer,
        
        /// <remarks/>
        CollectorDoorToDoor,
        
        /// <remarks/>
        CollegeDean,
        
        /// <remarks/>
        CollegeLecturer,
        
        /// <remarks/>
        CollegePrincipal,
        
        /// <remarks/>
        CommercialArtist,
        
        /// <remarks/>
        CommercialManager,
        
        /// <remarks/>
        CommercialTraveller,
        
        /// <remarks/>
        CommissionAgent,
        
        /// <remarks/>
        Commissionaire,
        
        /// <remarks/>
        CommissionedOfficer,
        
        /// <remarks/>
        CommissioningEngineer,
        
        /// <remarks/>
        CommodityBroker,
        
        /// <remarks/>
        CommodityDealer,
        
        /// <remarks/>
        CommunicationsOfficer,
        
        /// <remarks/>
        CommunicationsSupervisor,
        
        /// <remarks/>
        CommunityCraftInstructor,
        
        /// <remarks/>
        CommunityNurse,
        
        /// <remarks/>
        CommunityWorker,
        
        /// <remarks/>
        CompanyChairman,
        
        /// <remarks/>
        CompanyDirector,
        
        /// <remarks/>
        CompanySearchAgent,
        
        /// <remarks/>
        CompanySecretary,
        
        /// <remarks/>
        ComplementaryTherapist,
        
        /// <remarks/>
        Composer,
        
        /// <remarks/>
        Compositor,
        
        /// <remarks/>
        ComputerAnalyst,
        
        /// <remarks/>
        ComputerConsultant,
        
        /// <remarks/>
        ComputerEngineer,
        
        /// <remarks/>
        ComputerManager,
        
        /// <remarks/>
        ComputerOperator,
        
        /// <remarks/>
        ComputerProgrammer,
        
        /// <remarks/>
        ComputerTechnician,
        
        /// <remarks/>
        Computing,
        
        /// <remarks/>
        Confectioner,
        
        /// <remarks/>
        ConferenceManager,
        
        /// <remarks/>
        ConferenceOrganiser,
        
        /// <remarks/>
        Conservationist,
        
        /// <remarks/>
        Conservator,
        
        /// <remarks/>
        ConstructionEngineer,
        
        /// <remarks/>
        ConstructionWorker,
        
        /// <remarks/>
        Consultant,
        
        /// <remarks/>
        ConsultantMedical,
        
        /// <remarks/>
        ConsultantEngineer,
        
        /// <remarks/>
        ConsumerScientist,
        
        /// <remarks/>
        ContractCleaner,
        
        /// <remarks/>
        ContractFurnisher,
        
        /// <remarks/>
        ContractManager,
        
        /// <remarks/>
        Contractor,
        
        /// <remarks/>
        ContractsSupervisor,
        
        /// <remarks/>
        Conveyancer,
        
        /// <remarks/>
        Cook,
        
        /// <remarks/>
        Cooper,
        
        /// <remarks/>
        Coppersmith,
        
        /// <remarks/>
        Copywriter,
        
        /// <remarks/>
        Coroner,
        
        /// <remarks/>
        CorrosionConsultant,
        
        /// <remarks/>
        CostumeDesigner,
        
        /// <remarks/>
        CostumeJeweller,
        
        /// <remarks/>
        Costumier,
        
        /// <remarks/>
        CouncilWorker,
        
        /// <remarks/>
        Counsellor,
        
        /// <remarks/>
        CountrysideRanger,
        
        /// <remarks/>
        CountyCouncillor,
        
        /// <remarks/>
        Courier,
        
        /// <remarks/>
        CourierDriver,
        
        /// <remarks/>
        CourierMotorcycle,
        
        /// <remarks/>
        CourierParcelDelivery,
        
        /// <remarks/>
        CourtOfficer,
        
        /// <remarks/>
        CraftDealer,
        
        /// <remarks/>
        Craftsman,
        
        /// <remarks/>
        Craftswoman,
        
        /// <remarks/>
        CraneDriver,
        
        /// <remarks/>
        CraneErector,
        
        /// <remarks/>
        CraneOperator,
        
        /// <remarks/>
        CrecheWorker,
        
        /// <remarks/>
        CreditBroker,
        
        /// <remarks/>
        CreditControl,
        
        /// <remarks/>
        CreditController,
        
        /// <remarks/>
        CreditDraper,
        
        /// <remarks/>
        CreditManager,
        
        /// <remarks/>
        CrematoriumAttendant,
        
        /// <remarks/>
        CrimeExaminer,
        
        /// <remarks/>
        Crofter,
        
        /// <remarks/>
        Croupier,
        
        /// <remarks/>
        CrownProsecutor,
        
        /// <remarks/>
        Curator,
        
        /// <remarks/>
        CurrencyTrader,
        
        /// <remarks/>
        CurtainMaker,
        
        /// <remarks/>
        CustomerAdvisor,
        
        /// <remarks/>
        CustomerLiaisonOfficer,
        
        /// <remarks/>
        CustomsAndExcise,
        
        /// <remarks/>
        CustomsAndExciseOfficer,
        
        /// <remarks/>
        Cutler,
        
        /// <remarks/>
        Cutter,
        
        /// <remarks/>
        CycleRepairer,
        
        /// <remarks/>
        DairyEngineer,
        
        /// <remarks/>
        DairyWorker,
        
        /// <remarks/>
        DanceTeacher,
        
        /// <remarks/>
        Dancer,
        
        /// <remarks/>
        DarkRoomTechnician,
        
        /// <remarks/>
        DataAdministrator,
        
        /// <remarks/>
        DataCoOrdinator,
        
        /// <remarks/>
        DataProcessor,
        
        /// <remarks/>
        DatabaseAdministrator,
        
        /// <remarks/>
        DayCareOfficer,
        
        /// <remarks/>
        Dealer,
        
        /// <remarks/>
        DealerGeneral,
        
        /// <remarks/>
        DealerScrapOrWaste,
        
        /// <remarks/>
        DebtCollector,
        
        /// <remarks/>
        DebtCounsellor,
        
        /// <remarks/>
        Decorator,
        
        /// <remarks/>
        DefenceForcesPdforra,
        
        /// <remarks/>
        DeliveryCourier,
        
        /// <remarks/>
        DeliveryDriver,
        
        /// <remarks/>
        DeliveryRoundsman,
        
        /// <remarks/>
        DemolitionContractor,
        
        /// <remarks/>
        DemolitionWorker,
        
        /// <remarks/>
        Demonstrator,
        
        /// <remarks/>
        Dendrochronologist,
        
        /// <remarks/>
        DentalAssistant,
        
        /// <remarks/>
        DentalHygienist,
        
        /// <remarks/>
        DentalNurse,
        
        /// <remarks/>
        DentalSurgeon,
        
        /// <remarks/>
        DentalTechnician,
        
        /// <remarks/>
        DentalTherapist,
        
        /// <remarks/>
        Dentist,
        
        /// <remarks/>
        DentistOrDentition,
        
        /// <remarks/>
        DeputyHeadTeacher,
        
        /// <remarks/>
        DeputyManager,
        
        /// <remarks/>
        DeputyPrincipal,
        
        /// <remarks/>
        Dermatologist,
        
        /// <remarks/>
        DesignDirector,
        
        /// <remarks/>
        DesignEngineer,
        
        /// <remarks/>
        DesignManager,
        
        /// <remarks/>
        Designer,
        
        /// <remarks/>
        DesignerIndustrial,
        
        /// <remarks/>
        DespatchDriver,
        
        /// <remarks/>
        DespatchRider,
        
        /// <remarks/>
        DespatchWorker,
        
        /// <remarks/>
        DevelopmentManager,
        
        /// <remarks/>
        DiamondDealer,
        
        /// <remarks/>
        Diecaster,
        
        /// <remarks/>
        Dietician,
        
        /// <remarks/>
        DinnerLady,
        
        /// <remarks/>
        Diplomat,
        
        /// <remarks/>
        DiplomatUk,
        
        /// <remarks/>
        DiplomaticStaffBritish,
        
        /// <remarks/>
        DiplomaticStaffForeign,
        
        /// <remarks/>
        DiplomaticStaffOther,
        
        /// <remarks/>
        DiplomaticStaffRepublicOfIreland,
        
        /// <remarks/>
        DiplomaticStaffRoi,
        
        /// <remarks/>
        DirectorArts,
        
        /// <remarks/>
        DirectorCompany,
        
        /// <remarks/>
        DirectorPerformingArts,
        
        /// <remarks/>
        DirectorOrCompanyDirector,
        
        /// <remarks/>
        DiscJockey,
        
        /// <remarks/>
        DiscoStaff,
        
        /// <remarks/>
        DistilleryWorker,
        
        /// <remarks/>
        DistributionManager,
        
        /// <remarks/>
        DistrictNurse,
        
        /// <remarks/>
        DistrictValuer,
        
        /// <remarks/>
        Diver,
        
        /// <remarks/>
        Docker,
        
        /// <remarks/>
        DockyardWorker,
        
        /// <remarks/>
        Doctor,
        
        /// <remarks/>
        DoctorMedical,
        
        /// <remarks/>
        DocumentController,
        
        /// <remarks/>
        DogBeautician,
        
        /// <remarks/>
        DogBreeder,
        
        /// <remarks/>
        DogGroomer,
        
        /// <remarks/>
        DogTrainer,
        
        /// <remarks/>
        DogWalker,
        
        /// <remarks/>
        DogWarden,
        
        /// <remarks/>
        DollMaker,
        
        /// <remarks/>
        DomesticServant,
        
        /// <remarks/>
        DomesticStaff,
        
        /// <remarks/>
        DoorFitter,
        
        /// <remarks/>
        DoorToDoorCollector,
        
        /// <remarks/>
        Doorman,
        
        /// <remarks/>
        DoormanPubOrClub,
        
        /// <remarks/>
        DoubleGlazingFitter,
        
        /// <remarks/>
        DoubleGlazingSalesman,
        
        /// <remarks/>
        Draper,
        
        /// <remarks/>
        Draughtsman,
        
        /// <remarks/>
        Draughtswoman,
        
        /// <remarks/>
        Drayman,
        
        /// <remarks/>
        Dressmaker,
        
        /// <remarks/>
        DrillingTechnician,
        
        /// <remarks/>
        Driver,
        
        /// <remarks/>
        DriverHotFoodDelivery,
        
        /// <remarks/>
        DriverLightGoods,
        
        /// <remarks/>
        DriverPsv,
        
        /// <remarks/>
        DrivingExaminer,
        
        /// <remarks/>
        DrivingInstructor,
        
        /// <remarks/>
        DrivingInstructorAdvanced,
        
        /// <remarks/>
        DrivingInstructorHgv,
        
        /// <remarks/>
        DrugAddictionCounsellor,
        
        /// <remarks/>
        DryCleaner,
        
        /// <remarks/>
        Dryliner,
        
        /// <remarks/>
        Dustman,
        
        /// <remarks/>
        DyePolisher,
        
        /// <remarks/>
        Dyer,
        
        /// <remarks/>
        EarthMovingContractor,
        
        /// <remarks/>
        Ecologist,
        
        /// <remarks/>
        Economist,
        
        /// <remarks/>
        Editor,
        
        /// <remarks/>
        EditorNewspaper,
        
        /// <remarks/>
        EditorTvOrFilms,
        
        /// <remarks/>
        EditorialConsultant,
        
        /// <remarks/>
        EditorialStaff,
        
        /// <remarks/>
        EducationAdvisor,
        
        /// <remarks/>
        EducationOfficer,
        
        /// <remarks/>
        ElectricalContractor,
        
        /// <remarks/>
        ElectricalEngineer,
        
        /// <remarks/>
        ElectricalFitter,
        
        /// <remarks/>
        ElectricalGoods,
        
        /// <remarks/>
        Electrician,
        
        /// <remarks/>
        ElectricianVehicle,
        
        /// <remarks/>
        Electrologist,
        
        /// <remarks/>
        ElectronicEngineer,
        
        /// <remarks/>
        ElectronicsSupervisor,
        
        /// <remarks/>
        ElectronicsTechnician,
        
        /// <remarks/>
        Embalmer,
        
        /// <remarks/>
        EmbassyStaff,
        
        /// <remarks/>
        EmbassyStaffBritish,
        
        /// <remarks/>
        EmbassyStaffForeign,
        
        /// <remarks/>
        EmbassyStaffOther,
        
        /// <remarks/>
        EmbassyStaffRepublicOfIreland,
        
        /// <remarks/>
        EmbassyStaffRoi,
        
        /// <remarks/>
        EmbassyStaffUk,
        
        /// <remarks/>
        Embroiderer,
        
        /// <remarks/>
        EmergencyServiceStaff,
        
        /// <remarks/>
        EnergyAnalyst,
        
        /// <remarks/>
        Engineer,
        
        /// <remarks/>
        Engraver,
        
        /// <remarks/>
        EnquiryAgent,
        
        /// <remarks/>
        Entertainer,
        
        /// <remarks/>
        EnvironmentalChemist,
        
        /// <remarks/>
        EnvironmentalConsultant,
        
        /// <remarks/>
        EnvironmentalHealthOfficer,
        
        /// <remarks/>
        EquityAgent,
        
        /// <remarks/>
        Ergonomist,
        
        /// <remarks/>
        EstateAgent,
        
        /// <remarks/>
        EstateManager,
        
        /// <remarks/>
        Estimator,
        
        /// <remarks/>
        Evangelist,
        
        /// <remarks/>
        EventPromoter,
        
        /// <remarks/>
        EventsOrganiser,
        
        /// <remarks/>
        ExcursionManager,
        
        /// <remarks/>
        Executive,
        
        /// <remarks/>
        ExhaustFitter,
        
        /// <remarks/>
        ExhibitionDesigner,
        
        /// <remarks/>
        ExhibitionOrganiser,
        
        /// <remarks/>
        ExoticDancer,
        
        /// <remarks/>
        ExpeditionLeader,
        
        /// <remarks/>
        ExportConsultant,
        
        /// <remarks/>
        Exporter,
        
        /// <remarks/>
        ExtrusionOperator,
        
        /// <remarks/>
        Fabricator,
        
        /// <remarks/>
        FactoryCanteenManager,
        
        /// <remarks/>
        FactoryEmployee,
        
        /// <remarks/>
        FactoryInspector,
        
        /// <remarks/>
        FactoryManager,
        
        /// <remarks/>
        FactoryWorker,
        
        /// <remarks/>
        FairgroundWorker,
        
        /// <remarks/>
        Falconer,
        
        /// <remarks/>
        FarmManager,
        
        /// <remarks/>
        FarmWorker,
        
        /// <remarks/>
        Farmer,
        
        /// <remarks/>
        Farrier,
        
        /// <remarks/>
        FasTrainee,
        
        /// <remarks/>
        FasTrainer,
        
        /// <remarks/>
        FashionDesigner,
        
        /// <remarks/>
        FashionPhotographer,
        
        /// <remarks/>
        FastFoodCaterer,
        
        /// <remarks/>
        FastFoodDeliveryDriver,
        
        /// <remarks/>
        FastFoodProprietor,
        
        /// <remarks/>
        FenceErecter,
        
        /// <remarks/>
        FenceErector,
        
        /// <remarks/>
        FibreGlassMoulder,
        
        /// <remarks/>
        FieldOfficer,
        
        /// <remarks/>
        FigurePainter,
        
        /// <remarks/>
        FilmDirector,
        
        /// <remarks/>
        FilmProducer,
        
        /// <remarks/>
        FilmTechnician,
        
        /// <remarks/>
        FinanceController,
        
        /// <remarks/>
        FinanceDirector,
        
        /// <remarks/>
        FinanceManager,
        
        /// <remarks/>
        FinanceOfficer,
        
        /// <remarks/>
        FinancialAdvisor,
        
        /// <remarks/>
        FinancialAnalyst,
        
        /// <remarks/>
        FinancialConsultant,
        
        /// <remarks/>
        Financier,
        
        /// <remarks/>
        FireOfficer,
        
        /// <remarks/>
        FirePreventionOfficer,
        
        /// <remarks/>
        FireProtectionConsultant,
        
        /// <remarks/>
        Firefighter,
        
        /// <remarks/>
        Fireman,
        
        /// <remarks/>
        FiremanOrWoman,
        
        /// <remarks/>
        FireplaceFitter,
        
        /// <remarks/>
        Firewoman,
        
        /// <remarks/>
        FirewoodMerchant,
        
        /// <remarks/>
        FirstAidWorker,
        
        /// <remarks/>
        FishBuyer,
        
        /// <remarks/>
        FishFarmer,
        
        /// <remarks/>
        FishFilleter,
        
        /// <remarks/>
        FishFryer,
        
        /// <remarks/>
        FishMerchant,
        
        /// <remarks/>
        FishWorker,
        
        /// <remarks/>
        FisheriesInspector,
        
        /// <remarks/>
        Fisherman,
        
        /// <remarks/>
        FisheryManager,
        
        /// <remarks/>
        Fishmonger,
        
        /// <remarks/>
        FitnessInstructor,
        
        /// <remarks/>
        Fitter,
        
        /// <remarks/>
        FitterTyreOrExhaust,
        
        /// <remarks/>
        Flagger,
        
        /// <remarks/>
        FlightDeckCrew,
        
        /// <remarks/>
        FloorLayer,
        
        /// <remarks/>
        FloorManager,
        
        /// <remarks/>
        Florist,
        
        /// <remarks/>
        FlourMiller,
        
        /// <remarks/>
        FlowerArranger,
        
        /// <remarks/>
        FlyingInstructor,
        
        /// <remarks/>
        FoamConvertor,
        
        /// <remarks/>
        FoodProcessor,
        
        /// <remarks/>
        Footballer,
        
        /// <remarks/>
        ForcesForeign,
        
        /// <remarks/>
        ForcesHm,
        
        /// <remarks/>
        ForcesUs,
        
        /// <remarks/>
        Foreman,
        
        /// <remarks/>
        ForensicScientist,
        
        /// <remarks/>
        ForestRanger,
        
        /// <remarks/>
        Forester,
        
        /// <remarks/>
        ForkLiftTruckDriver,
        
        /// <remarks/>
        ForwardingAgent,
        
        /// <remarks/>
        FosterParent,
        
        /// <remarks/>
        FoundryWorker,
        
        /// <remarks/>
        FraudInvestigator,
        
        /// <remarks/>
        FrenchPolisher,
        
        /// <remarks/>
        Fruiterer,
        
        /// <remarks/>
        FuelMerchant,
        
        /// <remarks/>
        FundRaiser,
        
        /// <remarks/>
        FuneralDirector,
        
        /// <remarks/>
        FuneralFurnisher,
        
        /// <remarks/>
        FurnaceMan,
        
        /// <remarks/>
        FurnitureDealer,
        
        /// <remarks/>
        FurnitureManufacturer,
        
        /// <remarks/>
        FurnitureRemover,
        
        /// <remarks/>
        FurnitureRestorer,
        
        /// <remarks/>
        Furrier,
        
        /// <remarks/>
        GalleryOwner,
        
        /// <remarks/>
        GamClubStffLicPrem,
        
        /// <remarks/>
        GamClubStffUnlPrem,
        
        /// <remarks/>
        Gambler,
        
        /// <remarks/>
        GamblingClubStaff,
        
        /// <remarks/>
        Gamekeeper,
        
        /// <remarks/>
        GamingBoardInspector,
        
        /// <remarks/>
        GamingClubManager,
        
        /// <remarks/>
        GamingClubProprietor,
        
        /// <remarks/>
        GamingClubStaffLicensedPremises,
        
        /// <remarks/>
        GamingClubStaffUnlicensedPremises,
        
        /// <remarks/>
        GarageAttendant,
        
        /// <remarks/>
        GarageForeman,
        
        /// <remarks/>
        GarageManager,
        
        /// <remarks/>
        Garda,
        
        /// <remarks/>
        GardenDesigner,
        
        /// <remarks/>
        Gardener,
        
        /// <remarks/>
        GasFitter,
        
        /// <remarks/>
        GasMechanic,
        
        /// <remarks/>
        GasTechnician,
        
        /// <remarks/>
        GateKeeper,
        
        /// <remarks/>
        Genealogist,
        
        /// <remarks/>
        GeneralDealer,
        
        /// <remarks/>
        GeneralManager,
        
        /// <remarks/>
        GeneralOperative,
        
        /// <remarks/>
        GeneralPractitioner,
        
        /// <remarks/>
        GeneralWorker,
        
        /// <remarks/>
        Geologist,
        
        /// <remarks/>
        Geophysicist,
        
        /// <remarks/>
        Gilder,
        
        /// <remarks/>
        GlassWorker,
        
        /// <remarks/>
        Glazier,
        
        /// <remarks/>
        Goldsmith,
        
        /// <remarks/>
        GolfCaddy,
        
        /// <remarks/>
        GolfClubProfessional,
        
        /// <remarks/>
        Golfer,
        
        /// <remarks/>
        GoodsHandler,
        
        /// <remarks/>
        Governor,
        
        /// <remarks/>
        GraniteTechnician,
        
        /// <remarks/>
        GraphicDesigner,
        
        /// <remarks/>
        Graphologist,
        
        /// <remarks/>
        GraveDigger,
        
        /// <remarks/>
        GravelMerchant,
        
        /// <remarks/>
        GreenKeeper,
        
        /// <remarks/>
        Greengrocer,
        
        /// <remarks/>
        Grocer,
        
        /// <remarks/>
        Groom,
        
        /// <remarks/>
        GroundWorker,
        
        /// <remarks/>
        Groundsman,
        
        /// <remarks/>
        Guard,
        
        /// <remarks/>
        GuestHouseOwnerLicensed,
        
        /// <remarks/>
        GuestHouseOwnerUnlicensed,
        
        /// <remarks/>
        GuestHouseProprietor,
        
        /// <remarks/>
        Guide,
        
        /// <remarks/>
        GunSmith,
        
        /// <remarks/>
        Gynaecologist,
        
        /// <remarks/>
        HackneyDriver,
        
        /// <remarks/>
        Hairdresser,
        
        /// <remarks/>
        HairdresserMobile,
        
        /// <remarks/>
        Handyman,
        
        /// <remarks/>
        HarbourMaster,
        
        /// <remarks/>
        HardwareDealer,
        
        /// <remarks/>
        HaulageContractor,
        
        /// <remarks/>
        Hawker,
        
        /// <remarks/>
        HeadAccurist,
        
        /// <remarks/>
        HeadGreenkeeper,
        
        /// <remarks/>
        HeadLad,
        
        /// <remarks/>
        Headteacher,
        
        /// <remarks/>
        HealthAdvisor,
        
        /// <remarks/>
        HealthAndSafetyConsultant,
        
        /// <remarks/>
        HealthAndSafetyOfficer,
        
        /// <remarks/>
        HealthBoardStaff,
        
        /// <remarks/>
        HealthCareAssistant,
        
        /// <remarks/>
        HealthPlanner,
        
        /// <remarks/>
        HealthServiceEmployee,
        
        /// <remarks/>
        HealthTherapist,
        
        /// <remarks/>
        HealthVisitor,
        
        /// <remarks/>
        HearingTherapist,
        
        /// <remarks/>
        HeatingAndVentilationEngineer,
        
        /// <remarks/>
        HeatingContractor,
        
        /// <remarks/>
        HeatingEngineer,
        
        /// <remarks/>
        HeatingOrVentilationEngineer,
        
        /// <remarks/>
        Herbalist,
        
        /// <remarks/>
        HgvDriver,
        
        /// <remarks/>
        HgvMechanic,
        
        /// <remarks/>
        HighwayInspector,
        
        /// <remarks/>
        HireCarDriver,
        
        /// <remarks/>
        Hirer,
        
        /// <remarks/>
        Historian,
        
        /// <remarks/>
        HodCarrier,
        
        /// <remarks/>
        HolidayCampStaffLicensedPremises,
        
        /// <remarks/>
        HolidayCampStaffUnlicensedPremises,
        
        /// <remarks/>
        HomeEconomist,
        
        /// <remarks/>
        HomeHelp,
        
        /// <remarks/>
        HomeMaker,
        
        /// <remarks/>
        HomecareManager,
        
        /// <remarks/>
        Homemaker,
        
        /// <remarks/>
        Homeopath,
        
        /// <remarks/>
        Homeworker,
        
        /// <remarks/>
        HopMerchant,
        
        /// <remarks/>
        Horologist,
        
        /// <remarks/>
        HorseBreeder,
        
        /// <remarks/>
        HorseDealer,
        
        /// <remarks/>
        HorseRidingInstructor,
        
        /// <remarks/>
        HorseTrader,
        
        /// <remarks/>
        HorseTrainer,
        
        /// <remarks/>
        HorticulturalConsultant,
        
        /// <remarks/>
        Horticulturalist,
        
        /// <remarks/>
        HosieryMechanic,
        
        /// <remarks/>
        HosieryWorker,
        
        /// <remarks/>
        HospitalConsultant,
        
        /// <remarks/>
        HospitalDoctor,
        
        /// <remarks/>
        HospitalEmployee,
        
        /// <remarks/>
        HospitalManager,
        
        /// <remarks/>
        HospitalOrderly,
        
        /// <remarks/>
        HospitalStaff,
        
        /// <remarks/>
        HospitalTechnician,
        
        /// <remarks/>
        HospitalWarden,
        
        /// <remarks/>
        HospitalWorker,
        
        /// <remarks/>
        HostelStaff,
        
        /// <remarks/>
        Hostess,
        
        /// <remarks/>
        HotFoilPrinter,
        
        /// <remarks/>
        HotelConsultant,
        
        /// <remarks/>
        HotelWorker,
        
        /// <remarks/>
        Hotelier,
        
        /// <remarks/>
        HouseParent,
        
        /// <remarks/>
        HouseSitter,
        
        /// <remarks/>
        Househusband,
        
        /// <remarks/>
        Housekeeper,
        
        /// <remarks/>
        Housewife,
        
        /// <remarks/>
        HousingAssistant,
        
        /// <remarks/>
        HousingOfficer,
        
        /// <remarks/>
        HousingSupervisor,
        
        /// <remarks/>
        HumanResourcesManager,
        
        /// <remarks/>
        HumanResourcesStaff,
        
        /// <remarks/>
        HuntMaster,
        
        /// <remarks/>
        Huntsman,
        
        /// <remarks/>
        HydroGeologist,
        
        /// <remarks/>
        Hygienist,
        
        /// <remarks/>
        Hypnotherapist,
        
        /// <remarks/>
        Hypnotist,
        
        /// <remarks/>
        IceCreamVendor,
        
        /// <remarks/>
        Illustrator,
        
        /// <remarks/>
        ImmigrationOfficer,
        
        /// <remarks/>
        ImportConsultant,
        
        /// <remarks/>
        Importer,
        
        /// <remarks/>
        IndependentMeans,
        
        /// <remarks/>
        InductionMoulder,
        
        /// <remarks/>
        IndustrialChemist,
        
        /// <remarks/>
        IndustrialConsultant,
        
        /// <remarks/>
        IndustrialDesigner,
        
        /// <remarks/>
        IndustrialRelationsManager,
        
        /// <remarks/>
        InjectionMoulder,
        
        /// <remarks/>
        InlandRevenueOfficer,
        
        /// <remarks/>
        Inspector,
        
        /// <remarks/>
        InspectorCustomsAndExcise,
        
        /// <remarks/>
        InspectorInsurance,
        
        /// <remarks/>
        InstrumentEngineer,
        
        /// <remarks/>
        InstrumentMaker,
        
        /// <remarks/>
        InstrumentSupervisor,
        
        /// <remarks/>
        InstrumentTechnician,
        
        /// <remarks/>
        InsuranceAgent,
        
        /// <remarks/>
        InsuranceAssessor,
        
        /// <remarks/>
        InsuranceBroker,
        
        /// <remarks/>
        InsuranceConsultant,
        
        /// <remarks/>
        InsuranceInspector,
        
        /// <remarks/>
        InsuranceIntermediary,
        
        /// <remarks/>
        InsuranceRepresentative,
        
        /// <remarks/>
        InsuranceStaff,
        
        /// <remarks/>
        InteriorDecorator,
        
        /// <remarks/>
        InteriorDesigner,
        
        /// <remarks/>
        Interpreter,
        
        /// <remarks/>
        Interviewer,
        
        /// <remarks/>
        Inventor,
        
        /// <remarks/>
        Investigator,
        
        /// <remarks/>
        InvestmentAdvisor,
        
        /// <remarks/>
        InvestmentBanker,
        
        /// <remarks/>
        InvestmentManager,
        
        /// <remarks/>
        IrishRailStaff,
        
        /// <remarks/>
        Ironmonger,
        
        /// <remarks/>
        ItConsultant,
        
        /// <remarks/>
        ItManager,
        
        /// <remarks/>
        ItTrainer,
        
        /// <remarks/>
        ItinerantLabourer,
        
        /// <remarks/>
        ItinerantTrader,
        
        /// <remarks/>
        Janitor,
        
        /// <remarks/>
        JazzComposer,
        
        /// <remarks/>
        Jeweller,
        
        /// <remarks/>
        JewelleryConsultant,
        
        /// <remarks/>
        Jockey,
        
        /// <remarks/>
        Joiner,
        
        /// <remarks/>
        JoineryConsultant,
        
        /// <remarks/>
        Journalist,
        
        /// <remarks/>
        JournalisticAgent,
        
        /// <remarks/>
        Judge,
        
        /// <remarks/>
        JunkShopProprietor,
        
        /// <remarks/>
        JusticeOfThePeace,
        
        /// <remarks/>
        KeepFitInstructor,
        
        /// <remarks/>
        KennelHand,
        
        /// <remarks/>
        KennelMaid,
        
        /// <remarks/>
        KennelsEmployee,
        
        /// <remarks/>
        KennelsOwner,
        
        /// <remarks/>
        KissagramPerson,
        
        /// <remarks/>
        KitchenWorker,
        
        /// <remarks/>
        Knitter,
        
        /// <remarks/>
        LabellingOperator,
        
        /// <remarks/>
        LaboratoryAnalyst,
        
        /// <remarks/>
        LaboratoryAssistant,
        
        /// <remarks/>
        LaboratoryAttendant,
        
        /// <remarks/>
        LaboratoryManager,
        
        /// <remarks/>
        LaboratoryOperative,
        
        /// <remarks/>
        LaboratorySupervisor,
        
        /// <remarks/>
        LaboratoryTechnician,
        
        /// <remarks/>
        Labourer,
        
        /// <remarks/>
        Laminator,
        
        /// <remarks/>
        LampshadeMaker,
        
        /// <remarks/>
        LandAgent,
        
        /// <remarks/>
        LandSurveyor,
        
        /// <remarks/>
        Landlady,
        
        /// <remarks/>
        Landlord,
        
        /// <remarks/>
        Landowner,
        
        /// <remarks/>
        LandscapeArchitect,
        
        /// <remarks/>
        LandscapeGardener,
        
        /// <remarks/>
        Landworker,
        
        /// <remarks/>
        LatheOperator,
        
        /// <remarks/>
        LaundryStaff,
        
        /// <remarks/>
        LaundryWorker,
        
        /// <remarks/>
        LavatoryAttendant,
        
        /// <remarks/>
        LawClerk,
        
        /// <remarks/>
        LawnMowerRepairer,
        
        /// <remarks/>
        Lawyer,
        
        /// <remarks/>
        LeafletDistributor,
        
        /// <remarks/>
        LeatherWorker,
        
        /// <remarks/>
        Lecturer,
        
        /// <remarks/>
        LedgerClerk,
        
        /// <remarks/>
        LegalAdvisor,
        
        /// <remarks/>
        LegalAssistant,
        
        /// <remarks/>
        LegalExecutive,
        
        /// <remarks/>
        LegalSecretary,
        
        /// <remarks/>
        LeisureCentreAttendant,
        
        /// <remarks/>
        LeisureCentreManager,
        
        /// <remarks/>
        LensGrinderAndPolisher,
        
        /// <remarks/>
        LettingAgent,
        
        /// <remarks/>
        LiaisonOfficer,
        
        /// <remarks/>
        Librarian,
        
        /// <remarks/>
        LibraryManager,
        
        /// <remarks/>
        Licensee,
        
        /// <remarks/>
        LicensingConsultant,
        
        /// <remarks/>
        LifeAssuranceSalesman,
        
        /// <remarks/>
        Lifeguard,
        
        /// <remarks/>
        LiftAttendant,
        
        /// <remarks/>
        LiftEngineer,
        
        /// <remarks/>
        Lighterman,
        
        /// <remarks/>
        LighthouseKeeper,
        
        /// <remarks/>
        LightingDesigner,
        
        /// <remarks/>
        LightingTechnician,
        
        /// <remarks/>
        LimeKilnAttendant,
        
        /// <remarks/>
        LineManager,
        
        /// <remarks/>
        LineWorker,
        
        /// <remarks/>
        Linesman,
        
        /// <remarks/>
        Linguist,
        
        /// <remarks/>
        LiteraryAgent,
        
        /// <remarks/>
        LiteraryEditor,
        
        /// <remarks/>
        Lithographer,
        
        /// <remarks/>
        LitigationManager,
        
        /// <remarks/>
        Loader,
        
        /// <remarks/>
        LoansManager,
        
        /// <remarks/>
        LocalGovernmentOfficer,
        
        /// <remarks/>
        LockKeeper,
        
        /// <remarks/>
        Locksmith,
        
        /// <remarks/>
        LocumPharmacist,
        
        /// <remarks/>
        LogMerchant,
        
        /// <remarks/>
        LorryDriver,
        
        /// <remarks/>
        LossAdjuster,
        
        /// <remarks/>
        LossAdjustor,
        
        /// <remarks/>
        LossAssessor,
        
        /// <remarks/>
        Lumberjack,
        
        /// <remarks/>
        MachineFittersMate,
        
        /// <remarks/>
        MachineMinder,
        
        /// <remarks/>
        MachineOperator,
        
        /// <remarks/>
        MachineSetter,
        
        /// <remarks/>
        MachineTechnician,
        
        /// <remarks/>
        MachineToolEngineer,
        
        /// <remarks/>
        MachineToolFitter,
        
        /// <remarks/>
        Machinist,
        
        /// <remarks/>
        Magician,
        
        /// <remarks/>
        Magistrate,
        
        /// <remarks/>
        MagistratesClerk,
        
        /// <remarks/>
        Maid,
        
        /// <remarks/>
        MaintenanceEngineer,
        
        /// <remarks/>
        MaintenanceFitter,
        
        /// <remarks/>
        MaintenanceMan,
        
        /// <remarks/>
        MaintenanceManager,
        
        /// <remarks/>
        MaintenanceStaff,
        
        /// <remarks/>
        MakeUpArtist,
        
        /// <remarks/>
        MakeUpSupervisor,
        
        /// <remarks/>
        ManagementConsultant,
        
        /// <remarks/>
        ManagementTrainee,
        
        /// <remarks/>
        Manager,
        
        /// <remarks/>
        ManagerInvestment,
        
        /// <remarks/>
        ManagerLicensedPremises,
        
        /// <remarks/>
        ManagerRetailShop,
        
        /// <remarks/>
        ManagerRingSports,
        
        /// <remarks/>
        ManagerSalesNonTravelling,
        
        /// <remarks/>
        ManagerSalesTravelling,
        
        /// <remarks/>
        ManagerSports,
        
        /// <remarks/>
        ManagerUnlicensedPremises,
        
        /// <remarks/>
        ManagingDirector,
        
        /// <remarks/>
        Manicurist,
        
        /// <remarks/>
        ManufacturingAgent,
        
        /// <remarks/>
        ManufacturingTechnician,
        
        /// <remarks/>
        MapMounter,
        
        /// <remarks/>
        MarbleFinisher,
        
        /// <remarks/>
        MarbleMason,
        
        /// <remarks/>
        MarineBroker,
        
        /// <remarks/>
        MarineConsultant,
        
        /// <remarks/>
        MarineElectrician,
        
        /// <remarks/>
        MarineEngineer,
        
        /// <remarks/>
        MarineGeologist,
        
        /// <remarks/>
        MarinePilot,
        
        /// <remarks/>
        MarineSurveyor,
        
        /// <remarks/>
        MarketAnalyst,
        
        /// <remarks/>
        MarketGardener,
        
        /// <remarks/>
        MarketResearchAssistant,
        
        /// <remarks/>
        MarketResearcher,
        
        /// <remarks/>
        MarketTrader,
        
        /// <remarks/>
        MarketingNonTravelling,
        
        /// <remarks/>
        MarketingTravelling,
        
        /// <remarks/>
        MarketingAgent,
        
        /// <remarks/>
        MarketingAssistant,
        
        /// <remarks/>
        MarketingConsultant,
        
        /// <remarks/>
        MarketingCoOrdinator,
        
        /// <remarks/>
        MarketingDirector,
        
        /// <remarks/>
        MarketingExecutive,
        
        /// <remarks/>
        MarketingManager,
        
        /// <remarks/>
        MarketingStaff,
        
        /// <remarks/>
        MarqueeErector,
        
        /// <remarks/>
        MartialArtsInstructor,
        
        /// <remarks/>
        MassageTherapist,
        
        /// <remarks/>
        Masseur,
        
        /// <remarks/>
        Masseuse,
        
        /// <remarks/>
        MasterMariner,
        
        /// <remarks/>
        MasterOfCeremonies,
        
        /// <remarks/>
        MasterOfFoxhounds,
        
        /// <remarks/>
        MaterialsController,
        
        /// <remarks/>
        MaterialsManager,
        
        /// <remarks/>
        Mathematician,
        
        /// <remarks/>
        Matron,
        
        /// <remarks/>
        MattressMaker,
        
        /// <remarks/>
        MatureStudent,
        
        /// <remarks/>
        MatureStudentLivingAtHome,
        
        /// <remarks/>
        MatureStudentLivingAway,
        
        /// <remarks/>
        MeatInspector,
        
        /// <remarks/>
        MeatWholesaler,
        
        /// <remarks/>
        Mechanic,
        
        /// <remarks/>
        MechanicAirport,
        
        /// <remarks/>
        MechanicVehicle,
        
        /// <remarks/>
        MechanicalEngineer,
        
        /// <remarks/>
        MechanicalTechnician,
        
        /// <remarks/>
        MedalDealer,
        
        /// <remarks/>
        MedicalAdvisor,
        
        /// <remarks/>
        MedicalAssistant,
        
        /// <remarks/>
        MedicalConsultant,
        
        /// <remarks/>
        MedicalOfficer,
        
        /// <remarks/>
        MedicalPhysicist,
        
        /// <remarks/>
        MedicalPractitioner,
        
        /// <remarks/>
        MedicalResearcher,
        
        /// <remarks/>
        MedicalSecretary,
        
        /// <remarks/>
        MedicalStudent,
        
        /// <remarks/>
        MedicalStudentLivingAtHome,
        
        /// <remarks/>
        MedicalStudentLivingAway,
        
        /// <remarks/>
        MedicalSupplier,
        
        /// <remarks/>
        MedicalTechnician,
        
        /// <remarks/>
        MemberOfParliament,
        
        /// <remarks/>
        Merchandiser,
        
        /// <remarks/>
        Merchant,
        
        /// <remarks/>
        MerchantBanker,
        
        /// <remarks/>
        MerchantNavy,
        
        /// <remarks/>
        MerchantSeaman,
        
        /// <remarks/>
        Messenger,
        
        /// <remarks/>
        MetalDealer,
        
        /// <remarks/>
        MetalEngineer,
        
        /// <remarks/>
        MetalPolisher,
        
        /// <remarks/>
        MetalWorker,
        
        /// <remarks/>
        Metallurgist,
        
        /// <remarks/>
        Meteorologist,
        
        /// <remarks/>
        MeterReader,
        
        /// <remarks/>
        Microbiologist,
        
        /// <remarks/>
        MicrofilmOperator,
        
        /// <remarks/>
        Midwife,
        
        /// <remarks/>
        Milklady,
        
        /// <remarks/>
        Milkman,
        
        /// <remarks/>
        MillOperator,
        
        /// <remarks/>
        MillWorker,
        
        /// <remarks/>
        Miller,
        
        /// <remarks/>
        Milliner,
        
        /// <remarks/>
        Millwright,
        
        /// <remarks/>
        Miner,
        
        /// <remarks/>
        Mineralologist,
        
        /// <remarks/>
        MinibusDriver,
        
        /// <remarks/>
        MinicabDriver,
        
        /// <remarks/>
        MiningConsultant,
        
        /// <remarks/>
        MiningEngineer,
        
        /// <remarks/>
        MinisterOfReligion,
        
        /// <remarks/>
        Missionary,
        
        /// <remarks/>
        MobileCaterer,
        
        /// <remarks/>
        MobileDiscJockey,
        
        /// <remarks/>
        MobileDiscoOwner,
        
        /// <remarks/>
        MobileHairdresser,
        
        /// <remarks/>
        MobileMotorMechanic,
        
        /// <remarks/>
        MobileServiceEngineer,
        
        /// <remarks/>
        Model,
        
        /// <remarks/>
        ModelMaker,
        
        /// <remarks/>
        MoneyBroker,
        
        /// <remarks/>
        MoneyDealer,
        
        /// <remarks/>
        Moneylender,
        
        /// <remarks/>
        Monk,
        
        /// <remarks/>
        MonumentalSculptor,
        
        /// <remarks/>
        MooringContractor,
        
        /// <remarks/>
        MortgageBroker,
        
        /// <remarks/>
        MortgageConsultant,
        
        /// <remarks/>
        Mortician,
        
        /// <remarks/>
        MotorDealer,
        
        /// <remarks/>
        MotorEngineer,
        
        /// <remarks/>
        MotorFitter,
        
        /// <remarks/>
        MotorMechanic,
        
        /// <remarks/>
        MotorRacingOrganiser,
        
        /// <remarks/>
        MotorTrade,
        
        /// <remarks/>
        MotorTrader,
        
        /// <remarks/>
        MuseumAssistant,
        
        /// <remarks/>
        MuseumAttendant,
        
        /// <remarks/>
        MuseumConsultant,
        
        /// <remarks/>
        MuseumTechnician,
        
        /// <remarks/>
        MusicTeacher,
        
        /// <remarks/>
        MusicTherapist,
        
        /// <remarks/>
        MusicWholesaler,
        
        /// <remarks/>
        Musician,
        
        /// <remarks/>
        MusicianClassical,
        
        /// <remarks/>
        MusicianDanceBand,
        
        /// <remarks/>
        MusicianPopGroup,
        
        /// <remarks/>
        Nanny,
        
        /// <remarks/>
        Naturopath,
        
        /// <remarks/>
        Navigator,
        
        /// <remarks/>
        NavyNcoOrCommissionedOfficer,
        
        /// <remarks/>
        NavyOtherRanks,
        
        /// <remarks/>
        Negotiator,
        
        /// <remarks/>
        Neurologist,
        
        /// <remarks/>
        Newsagent,
        
        /// <remarks/>
        NightClubStaff,
        
        /// <remarks/>
        NightPorter,
        
        /// <remarks/>
        NightWatchman,
        
        /// <remarks/>
        NonCommissionedOfficer,
        
        /// <remarks/>
        NotInEmployment,
        
        /// <remarks/>
        NotaryPublic,
        
        /// <remarks/>
        NuclearScientist,
        
        /// <remarks/>
        Nun,
        
        /// <remarks/>
        Nurse,
        
        /// <remarks/>
        NurseryAssistant,
        
        /// <remarks/>
        NurseryNurse,
        
        /// <remarks/>
        NurseryWorker,
        
        /// <remarks/>
        Nurseryman,
        
        /// <remarks/>
        NursingAssistant,
        
        /// <remarks/>
        NursingAuxiliary,
        
        /// <remarks/>
        NursingManager,
        
        /// <remarks/>
        NursingSister,
        
        /// <remarks/>
        Nutritionist,
        
        /// <remarks/>
        OccupationalHealthConsultant,
        
        /// <remarks/>
        OccupationalHealthNurse,
        
        /// <remarks/>
        OccupationalTherapist,
        
        /// <remarks/>
        Oculist,
        
        /// <remarks/>
        OffLicenceEmployee,
        
        /// <remarks/>
        OffShoreSurveyor,
        
        /// <remarks/>
        OfficeAdministrator,
        
        /// <remarks/>
        OfficeManager,
        
        /// <remarks/>
        OfficeWorker,
        
        /// <remarks/>
        OilBroker,
        
        /// <remarks/>
        OilRigCrew,
        
        /// <remarks/>
        OperaSinger,
        
        /// <remarks/>
        OperationsDirector,
        
        /// <remarks/>
        OperationsManager,
        
        /// <remarks/>
        OperationsSupervisor,
        
        /// <remarks/>
        OpthalmicTechnician,
        
        /// <remarks/>
        OpticalAdvisor,
        
        /// <remarks/>
        OpticalAssistant,
        
        /// <remarks/>
        OpticalTechnician,
        
        /// <remarks/>
        Optician,
        
        /// <remarks/>
        Optometrist,
        
        /// <remarks/>
        OrchestralViolinist,
        
        /// <remarks/>
        OrderClerk,
        
        /// <remarks/>
        Organist,
        
        /// <remarks/>
        OrnamentalBlacksmith,
        
        /// <remarks/>
        Ornithologist,
        
        /// <remarks/>
        OrthopaedicTechnician,
        
        /// <remarks/>
        Orthoptist,
        
        /// <remarks/>
        Osteopath,
        
        /// <remarks/>
        Ostler,
        
        /// <remarks/>
        OutdoorPursuitsInstructor,
        
        /// <remarks/>
        Outfitter,
        
        /// <remarks/>
        OutreachWorker,
        
        /// <remarks/>
        OverheadLineInstructor,
        
        /// <remarks/>
        OverheadLineman,
        
        /// <remarks/>
        Overlocker,
        
        /// <remarks/>
        OverseasMailer,
        
        /// <remarks/>
        Overwriter,
        
        /// <remarks/>
        PackagingConsultant,
        
        /// <remarks/>
        Packer,
        
        /// <remarks/>
        Paediatrician,
        
        /// <remarks/>
        PagerOperator,
        
        /// <remarks/>
        PaintConsultant,
        
        /// <remarks/>
        PaintSprayer,
        
        /// <remarks/>
        PaintSprayerMotorTrade,
        
        /// <remarks/>
        PaintSprayerNonMotorTrade,
        
        /// <remarks/>
        Painter,
        
        /// <remarks/>
        PainterAndDecorator,
        
        /// <remarks/>
        Palaeobotanist,
        
        /// <remarks/>
        Palaeontologist,
        
        /// <remarks/>
        PalletMaker,
        
        /// <remarks/>
        PanelBeater,
        
        /// <remarks/>
        PaperMillWorker,
        
        /// <remarks/>
        ParachutePacker,
        
        /// <remarks/>
        Paramedic,
        
        /// <remarks/>
        ParkAttendant,
        
        /// <remarks/>
        ParkKeeper,
        
        /// <remarks/>
        ParkRanger,
        
        /// <remarks/>
        ParkOrRecreationalAttendant,
        
        /// <remarks/>
        PartitionErector,
        
        /// <remarks/>
        PartsMan,
        
        /// <remarks/>
        PartsManager,
        
        /// <remarks/>
        PartsSupervisor,
        
        /// <remarks/>
        PartyPlanner,
        
        /// <remarks/>
        Pasteuriser,
        
        /// <remarks/>
        PastryChef,
        
        /// <remarks/>
        PatentAgent,
        
        /// <remarks/>
        PatentAttorney,
        
        /// <remarks/>
        Pathologist,
        
        /// <remarks/>
        PatrolPerson,
        
        /// <remarks/>
        Patrolman,
        
        /// <remarks/>
        PatternCutter,
        
        /// <remarks/>
        PatternMaker,
        
        /// <remarks/>
        PatternWeaver,
        
        /// <remarks/>
        Paviour,
        
        /// <remarks/>
        Pawnbroker,
        
        /// <remarks/>
        PaymentOfficer,
        
        /// <remarks/>
        PayrollAssistant,
        
        /// <remarks/>
        PayrollClerk,
        
        /// <remarks/>
        PayrollManager,
        
        /// <remarks/>
        PayrollSupervisor,
        
        /// <remarks/>
        PearlStringer,
        
        /// <remarks/>
        Pedicurist,
        
        /// <remarks/>
        PensionsConsultant,
        
        /// <remarks/>
        PensionsManager,
        
        /// <remarks/>
        PersonalAssistant,
        
        /// <remarks/>
        PersonnelAdministrator,
        
        /// <remarks/>
        PersonnelManager,
        
        /// <remarks/>
        PersonnelOfficer,
        
        /// <remarks/>
        PestControl,
        
        /// <remarks/>
        PestController,
        
        /// <remarks/>
        PetMinder,
        
        /// <remarks/>
        PetrolStationAttendant,
        
        /// <remarks/>
        PetroleumEngineer,
        
        /// <remarks/>
        PettyOfficer,
        
        /// <remarks/>
        PharmaceuticalAssistant,
        
        /// <remarks/>
        PharmaceuticalTechnician,
        
        /// <remarks/>
        Pharmacist,
        
        /// <remarks/>
        PharmacyManager,
        
        /// <remarks/>
        PharmacyTechnician,
        
        /// <remarks/>
        Philatelist,
        
        /// <remarks/>
        Phlebotomist,
        
        /// <remarks/>
        PhotoEngraver,
        
        /// <remarks/>
        PhotoLaboratoryProcessor,
        
        /// <remarks/>
        PhotoTechnician,
        
        /// <remarks/>
        PhotocopyMachineTechnician,
        
        /// <remarks/>
        Photographer,
        
        /// <remarks/>
        PhotographerFashion,
        
        /// <remarks/>
        PhotographerLocation,
        
        /// <remarks/>
        PhotographerStudio,
        
        /// <remarks/>
        PhotographicAgent,
        
        /// <remarks/>
        Physician,
        
        /// <remarks/>
        Physicist,
        
        /// <remarks/>
        Physiologist,
        
        /// <remarks/>
        Physiotherapist,
        
        /// <remarks/>
        PianoTeacher,
        
        /// <remarks/>
        PianoTuner,
        
        /// <remarks/>
        Picker,
        
        /// <remarks/>
        PictureEditor,
        
        /// <remarks/>
        PictureFramer,
        
        /// <remarks/>
        PictureResearcher,
        
        /// <remarks/>
        PigMan,
        
        /// <remarks/>
        PigManager,
        
        /// <remarks/>
        Pilot,
        
        /// <remarks/>
        PilotAir,
        
        /// <remarks/>
        PipeFitter,
        
        /// <remarks/>
        PipeInspector,
        
        /// <remarks/>
        PipeInsulator,
        
        /// <remarks/>
        PipeLayer,
        
        /// <remarks/>
        PlanningEngineer,
        
        /// <remarks/>
        PlanningManager,
        
        /// <remarks/>
        PlanningOfficer,
        
        /// <remarks/>
        PlanningTechnician,
        
        /// <remarks/>
        PlantAttendant,
        
        /// <remarks/>
        PlantDriver,
        
        /// <remarks/>
        PlantEngineer,
        
        /// <remarks/>
        PlantFitter,
        
        /// <remarks/>
        PlantManager,
        
        /// <remarks/>
        PlantOperator,
        
        /// <remarks/>
        Plasterer,
        
        /// <remarks/>
        PlasticsConsultant,
        
        /// <remarks/>
        PlasticsEngineer,
        
        /// <remarks/>
        PlateLayer,
        
        /// <remarks/>
        Plater,
        
        /// <remarks/>
        PlaygroupAssistant,
        
        /// <remarks/>
        PlaygroupLeader,
        
        /// <remarks/>
        Plumber,
        
        /// <remarks/>
        PlumbingAndHeatingEngineer,
        
        /// <remarks/>
        Podiatrist,
        
        /// <remarks/>
        PoliceCommunitySupportOfficer,
        
        /// <remarks/>
        PoliceOfficer,
        
        /// <remarks/>
        Polisher,
        
        /// <remarks/>
        PoolAttendant,
        
        /// <remarks/>
        PoolsCollector,
        
        /// <remarks/>
        Porter,
        
        /// <remarks/>
        PortfolioManager,
        
        /// <remarks/>
        PostCardSeller,
        
        /// <remarks/>
        PostOfficeCounterClerk,
        
        /// <remarks/>
        PostOfficeStaff,
        
        /// <remarks/>
        PostSorter,
        
        /// <remarks/>
        Postman,
        
        /// <remarks/>
        PostmanOrWoman,
        
        /// <remarks/>
        Postmaster,
        
        /// <remarks/>
        Postwoman,
        
        /// <remarks/>
        PotatoMerchant,
        
        /// <remarks/>
        Potter,
        
        /// <remarks/>
        PracticeManager,
        
        /// <remarks/>
        Preacher,
        
        /// <remarks/>
        PrecisionEngineer,
        
        /// <remarks/>
        PremisesSecurityInstallers,
        
        /// <remarks/>
        PressOfficer,
        
        /// <remarks/>
        PressOperator,
        
        /// <remarks/>
        PressSetter,
        
        /// <remarks/>
        Presser,
        
        /// <remarks/>
        Priest,
        
        /// <remarks/>
        PrintFinisher,
        
        /// <remarks/>
        Printer,
        
        /// <remarks/>
        PrisonChaplain,
        
        /// <remarks/>
        PrisonOfficer,
        
        /// <remarks/>
        PrivateInvestigator,
        
        /// <remarks/>
        ProbationOfficer,
        
        /// <remarks/>
        ProbationWorker,
        
        /// <remarks/>
        ProcessEngineer,
        
        /// <remarks/>
        ProcessOperator,
        
        /// <remarks/>
        ProcessWorker,
        
        /// <remarks/>
        ProcuratorFiscal,
        
        /// <remarks/>
        ProduceSupervisor,
        
        /// <remarks/>
        Producer,
        
        /// <remarks/>
        ProductInstaller,
        
        /// <remarks/>
        ProductManager,
        
        /// <remarks/>
        ProductionEngineer,
        
        /// <remarks/>
        ProductionHand,
        
        /// <remarks/>
        ProductionManager,
        
        /// <remarks/>
        ProductionPlanner,
        
        /// <remarks/>
        ProfessionalBoxer,
        
        /// <remarks/>
        ProfessionalRacingDriver,
        
        /// <remarks/>
        ProfessionalRacingMotorcyclist,
        
        /// <remarks/>
        ProfessionalSportsperson,
        
        /// <remarks/>
        ProfessionalWrestler,
        
        /// <remarks/>
        Professor,
        
        /// <remarks/>
        ProgressChaser,
        
        /// <remarks/>
        ProgressClerk,
        
        /// <remarks/>
        ProjectCoOrdinator,
        
        /// <remarks/>
        ProjectEngineer,
        
        /// <remarks/>
        ProjectLeader,
        
        /// <remarks/>
        ProjectManager,
        
        /// <remarks/>
        ProjectWorker,
        
        /// <remarks/>
        Projectionist,
        
        /// <remarks/>
        Promoter,
        
        /// <remarks/>
        PromoterRacing,
        
        /// <remarks/>
        PromoterRingSports,
        
        /// <remarks/>
        ProofReader,
        
        /// <remarks/>
        PropertyBuyer,
        
        /// <remarks/>
        PropertyDealer,
        
        /// <remarks/>
        PropertyDeveloper,
        
        /// <remarks/>
        PropertyManager,
        
        /// <remarks/>
        PropertyValuer,
        
        /// <remarks/>
        Proprietor,
        
        /// <remarks/>
        Prosthesist,
        
        /// <remarks/>
        Prosthetist,
        
        /// <remarks/>
        Psychiatrist,
        
        /// <remarks/>
        Psychoanalyst,
        
        /// <remarks/>
        PsychodynamicCounsellor,
        
        /// <remarks/>
        Psychologist,
        
        /// <remarks/>
        Psychotherapist,
        
        /// <remarks/>
        PublicHouseManager,
        
        /// <remarks/>
        PublicRelationsOfficer,
        
        /// <remarks/>
        Publican,
        
        /// <remarks/>
        PublicityManager,
        
        /// <remarks/>
        Publisher,
        
        /// <remarks/>
        PublishingManager,
        
        /// <remarks/>
        PurchaseClerk,
        
        /// <remarks/>
        PurchaseLedgerClerk,
        
        /// <remarks/>
        Purchaser,
        
        /// <remarks/>
        PurchasingAssistant,
        
        /// <remarks/>
        PurchasingManager,
        
        /// <remarks/>
        Purser,
        
        /// <remarks/>
        QualityController,
        
        /// <remarks/>
        QualityEngineer,
        
        /// <remarks/>
        QualityInspector,
        
        /// <remarks/>
        QualityManager,
        
        /// <remarks/>
        QualityTechnician,
        
        /// <remarks/>
        QuantitySurveyor,
        
        /// <remarks/>
        QuarryWorker,
        
        /// <remarks/>
        QueensCouncil,
        
        /// <remarks/>
        QueensCounsel,
        
        /// <remarks/>
        Rabbi,
        
        /// <remarks/>
        RacehorseGroom,
        
        /// <remarks/>
        RacingOrganiser,
        
        /// <remarks/>
        RadioController,
        
        /// <remarks/>
        RadioDirector,
        
        /// <remarks/>
        RadioEngineer,
        
        /// <remarks/>
        RadioOperator,
        
        /// <remarks/>
        RadioPresenter,
        
        /// <remarks/>
        RadioProducer,
        
        /// <remarks/>
        Radiographer,
        
        /// <remarks/>
        Radiologist,
        
        /// <remarks/>
        RailwayStaff,
        
        /// <remarks/>
        RallyDriver,
        
        /// <remarks/>
        RampAgent,
        
        /// <remarks/>
        Receptionist,
        
        /// <remarks/>
        RecordsSupervisor,
        
        /// <remarks/>
        RecoveryVehicleCoOrdinator,
        
        /// <remarks/>
        RecruitmentConsultant,
        
        /// <remarks/>
        Rector,
        
        /// <remarks/>
        Referee,
        
        /// <remarks/>
        RefigerationEngineer,
        
        /// <remarks/>
        RefitMerchandiser,
        
        /// <remarks/>
        Reflexologist,
        
        /// <remarks/>
        RefractoryEngineer,
        
        /// <remarks/>
        RefrigerationEngineer,
        
        /// <remarks/>
        RefuseCollector,
        
        /// <remarks/>
        Registrar,
        
        /// <remarks/>
        Regulator,
        
        /// <remarks/>
        RelocationAgent,
        
        /// <remarks/>
        RemedialTherapist,
        
        /// <remarks/>
        RentCollector,
        
        /// <remarks/>
        RentOfficer,
        
        /// <remarks/>
        RepairMan,
        
        /// <remarks/>
        Reporter,
        
        /// <remarks/>
        ReprographicAssistant,
        
        /// <remarks/>
        ResearchAnalyst,
        
        /// <remarks/>
        ResearchConsultant,
        
        /// <remarks/>
        ResearchDirector,
        
        /// <remarks/>
        ResearchScientist,
        
        /// <remarks/>
        ResearchTechnician,
        
        /// <remarks/>
        Researcher,
        
        /// <remarks/>
        ReSettlementOfficer,
        
        /// <remarks/>
        ResinCaster,
        
        /// <remarks/>
        RestaurantManager,
        
        /// <remarks/>
        Restaurateur,
        
        /// <remarks/>
        Restorer,
        
        /// <remarks/>
        Retired,
        
        /// <remarks/>
        RevenueClerk,
        
        /// <remarks/>
        RevenueOfficer,
        
        /// <remarks/>
        RidingInstructor,
        
        /// <remarks/>
        RigWorker,
        
        /// <remarks/>
        RigWorkerOffShore,
        
        /// <remarks/>
        Rigger,
        
        /// <remarks/>
        Riveter,
        
        /// <remarks/>
        RoadSafetyOfficer,
        
        /// <remarks/>
        RoadSweeper,
        
        /// <remarks/>
        RoadWorker,
        
        /// <remarks/>
        RoofTiler,
        
        /// <remarks/>
        Roofer,
        
        /// <remarks/>
        RoseGrower,
        
        /// <remarks/>
        RoyalMarine,
        
        /// <remarks/>
        RugMaker,
        
        /// <remarks/>
        Saddler,
        
        /// <remarks/>
        SafetyOfficer,
        
        /// <remarks/>
        SailMaker,
        
        /// <remarks/>
        Sailor,
        
        /// <remarks/>
        SalesNonTravelling,
        
        /// <remarks/>
        SalesTravelling,
        
        /// <remarks/>
        SalesAdministrator,
        
        /// <remarks/>
        SalesAssistant,
        
        /// <remarks/>
        SalesDirector,
        
        /// <remarks/>
        SalesEngineer,
        
        /// <remarks/>
        SalesExecutive,
        
        /// <remarks/>
        SalesManager,
        
        /// <remarks/>
        SalesRepresentative,
        
        /// <remarks/>
        SalesSupport,
        
        /// <remarks/>
        SalesWoman,
        
        /// <remarks/>
        Salesman,
        
        /// <remarks/>
        SandBlaster,
        
        /// <remarks/>
        SandOrGravelMerchant,
        
        /// <remarks/>
        SawMiller,
        
        /// <remarks/>
        Scaffolder,
        
        /// <remarks/>
        SchoolCrossingWarden,
        
        /// <remarks/>
        SchoolInspector,
        
        /// <remarks/>
        ScientificOfficer,
        
        /// <remarks/>
        Scientist,
        
        /// <remarks/>
        ScrapDealer,
        
        /// <remarks/>
        ScreenPrinter,
        
        /// <remarks/>
        ScreenWriter,
        
        /// <remarks/>
        ScriptWriter,
        
        /// <remarks/>
        Sculptor,
        
        /// <remarks/>
        SeaCaptain,
        
        /// <remarks/>
        Seaman,
        
        /// <remarks/>
        Seamstress,
        
        /// <remarks/>
        SecondHandDealer,
        
        /// <remarks/>
        Secretary,
        
        /// <remarks/>
        SecretaryAndPa,
        
        /// <remarks/>
        Security,
        
        /// <remarks/>
        SecurityConsultant,
        
        /// <remarks/>
        SecurityController,
        
        /// <remarks/>
        SecurityGuard,
        
        /// <remarks/>
        SecurityOfficer,
        
        /// <remarks/>
        Seedsman,
        
        /// <remarks/>
        SemiProfessionalSportsperson,
        
        /// <remarks/>
        Senator,
        
        /// <remarks/>
        Servant,
        
        /// <remarks/>
        ServiceEngineer,
        
        /// <remarks/>
        ServiceEngineerNonMobile,
        
        /// <remarks/>
        ServiceManager,
        
        /// <remarks/>
        Sexton,
        
        /// <remarks/>
        ShareDealer,
        
        /// <remarks/>
        SheetMetalWorker,
        
        /// <remarks/>
        ShelfFiller,
        
        /// <remarks/>
        ShelterWarden,
        
        /// <remarks/>
        Shepherd,
        
        /// <remarks/>
        Sheriff,
        
        /// <remarks/>
        SheriffClerk,
        
        /// <remarks/>
        SheriffPrincipal,
        
        /// <remarks/>
        SheriffsOfficer,
        
        /// <remarks/>
        ShiftController,
        
        /// <remarks/>
        ShipBroker,
        
        /// <remarks/>
        ShipBuilder,
        
        /// <remarks/>
        ShippingClerk,
        
        /// <remarks/>
        ShippingOfficer,
        
        /// <remarks/>
        Shipwright,
        
        /// <remarks/>
        ShipyardWorker,
        
        /// <remarks/>
        ShoeMaker,
        
        /// <remarks/>
        ShoeRepairer,
        
        /// <remarks/>
        ShootingInstructor,
        
        /// <remarks/>
        ShopAssistant,
        
        /// <remarks/>
        ShopFitter,
        
        /// <remarks/>
        ShopKeeper,
        
        /// <remarks/>
        ShopManager,
        
        /// <remarks/>
        ShopProprietor,
        
        /// <remarks/>
        ShopProprietorMobile,
        
        /// <remarks/>
        ShotBlaster,
        
        /// <remarks/>
        ShowJumper,
        
        /// <remarks/>
        Showman,
        
        /// <remarks/>
        Shunter,
        
        /// <remarks/>
        SignMaker,
        
        /// <remarks/>
        Signalman,
        
        /// <remarks/>
        Signwriter,
        
        /// <remarks/>
        Silversmith,
        
        /// <remarks/>
        SiteAgent,
        
        /// <remarks/>
        SiteEngineer,
        
        /// <remarks/>
        Skipper,
        
        /// <remarks/>
        Slater,
        
        /// <remarks/>
        Slaughterman,
        
        /// <remarks/>
        Smallholder,
        
        /// <remarks/>
        Smelter,
        
        /// <remarks/>
        SocialWorker,
        
        /// <remarks/>
        SoftwareConsultant,
        
        /// <remarks/>
        SoftwareDeveloper,
        
        /// <remarks/>
        SoftwareEngineer,
        
        /// <remarks/>
        Soldier,
        
        /// <remarks/>
        Solicitor,
        
        /// <remarks/>
        SongWriter,
        
        /// <remarks/>
        Sorter,
        
        /// <remarks/>
        SoundEngineer,
        
        /// <remarks/>
        SoundTechnician,
        
        /// <remarks/>
        SpecialConstable,
        
        /// <remarks/>
        SpecialNeedsAssistant,
        
        /// <remarks/>
        SpeechTherapist,
        
        /// <remarks/>
        Spinner,
        
        /// <remarks/>
        SportsAdministratorOtherSports,
        
        /// <remarks/>
        SportsAdministratorRingSports,
        
        /// <remarks/>
        SportsCentreAttendant,
        
        /// <remarks/>
        SportsCentreStaff,
        
        /// <remarks/>
        SportsCoach,
        
        /// <remarks/>
        SportsCommentator,
        
        /// <remarks/>
        Sportsman,
        
        /// <remarks/>
        Sportswoman,
        
        /// <remarks/>
        SprayPainter,
        
        /// <remarks/>
        SpringMaker,
        
        /// <remarks/>
        StableHand,
        
        /// <remarks/>
        StaffNurse,
        
        /// <remarks/>
        StageDirector,
        
        /// <remarks/>
        StageHand,
        
        /// <remarks/>
        StageManager,
        
        /// <remarks/>
        StageMover,
        
        /// <remarks/>
        StationManager,
        
        /// <remarks/>
        Stationer,
        
        /// <remarks/>
        Statistician,
        
        /// <remarks/>
        SteelErector,
        
        /// <remarks/>
        SteelWorker,
        
        /// <remarks/>
        Steeplejack,
        
        /// <remarks/>
        Stenographer,
        
        /// <remarks/>
        Stevedore,
        
        /// <remarks/>
        Steward,
        
        /// <remarks/>
        StewardOrStewardess,
        
        /// <remarks/>
        Stewardess,
        
        /// <remarks/>
        StockController,
        
        /// <remarks/>
        StockManager,
        
        /// <remarks/>
        Stockbroker,
        
        /// <remarks/>
        Stockman,
        
        /// <remarks/>
        Stocktaker,
        
        /// <remarks/>
        StoneCutter,
        
        /// <remarks/>
        StoneSawyer,
        
        /// <remarks/>
        Stonemason,
        
        /// <remarks/>
        StoreDetective,
        
        /// <remarks/>
        Storeman,
        
        /// <remarks/>
        StoremanOrWoman,
        
        /// <remarks/>
        Storewoman,
        
        /// <remarks/>
        StreetEntertainer,
        
        /// <remarks/>
        StreetTrader,
        
        /// <remarks/>
        StudFarmProprietor,
        
        /// <remarks/>
        StudHand,
        
        /// <remarks/>
        StudManager,
        
        /// <remarks/>
        Student,
        
        /// <remarks/>
        StudentForeign,
        
        /// <remarks/>
        StudentLivingAtHome,
        
        /// <remarks/>
        StudentLivingAway,
        
        /// <remarks/>
        StudentNurse,
        
        /// <remarks/>
        StudentNurseLivingAtHome,
        
        /// <remarks/>
        StudentNurseLivingAway,
        
        /// <remarks/>
        StudentTeacher,
        
        /// <remarks/>
        StudentTeacherLivingAtHome,
        
        /// <remarks/>
        StudentTeacherLivingAway,
        
        /// <remarks/>
        StudioManager,
        
        /// <remarks/>
        SubPostmaster,
        
        /// <remarks/>
        SubPostmistress,
        
        /// <remarks/>
        SupermarketAssistant,
        
        /// <remarks/>
        Supervisor,
        
        /// <remarks/>
        SupplyTeacher,
        
        /// <remarks/>
        Surgeon,
        
        /// <remarks/>
        Surveyor,
        
        /// <remarks/>
        SurveyorChartered,
        
        /// <remarks/>
        SystemsAnalyst,
        
        /// <remarks/>
        SystemsEngineer,
        
        /// <remarks/>
        SystemsManager,
        
        /// <remarks/>
        TachographAnalyst,
        
        /// <remarks/>
        Tacker,
        
        /// <remarks/>
        Tailor,
        
        /// <remarks/>
        TankFarmOperative,
        
        /// <remarks/>
        TankerDriver,
        
        /// <remarks/>
        Tanner,
        
        /// <remarks/>
        TarmacadamContractor,
        
        /// <remarks/>
        Tarmacer,
        
        /// <remarks/>
        TarotReaderOrPalmistryExpert,
        
        /// <remarks/>
        Tattooist,
        
        /// <remarks/>
        TaxAdvisor,
        
        /// <remarks/>
        TaxAnalyst,
        
        /// <remarks/>
        TaxAssistant,
        
        /// <remarks/>
        TaxConsultant,
        
        /// <remarks/>
        TaxInspector,
        
        /// <remarks/>
        TaxManager,
        
        /// <remarks/>
        TaxOfficer,
        
        /// <remarks/>
        TaxiController,
        
        /// <remarks/>
        TaxiDriver,
        
        /// <remarks/>
        Taxidermist,
        
        /// <remarks/>
        TdOrSenator,
        
        /// <remarks/>
        TeaBlender,
        
        /// <remarks/>
        TeaTaster,
        
        /// <remarks/>
        Teacher,
        
        /// <remarks/>
        TeachersAssistant,
        
        /// <remarks/>
        TeachingProfession,
        
        /// <remarks/>
        TechnicalAdvisor,
        
        /// <remarks/>
        TechnicalAnalyst,
        
        /// <remarks/>
        TechnicalAssistant,
        
        /// <remarks/>
        TechnicalAuthor,
        
        /// <remarks/>
        TechnicalClerk,
        
        /// <remarks/>
        TechnicalCoOrdinator,
        
        /// <remarks/>
        TechnicalDirector,
        
        /// <remarks/>
        TechnicalEditor,
        
        /// <remarks/>
        TechnicalEngineer,
        
        /// <remarks/>
        TechnicalIllustrator,
        
        /// <remarks/>
        TechnicalInstructor,
        
        /// <remarks/>
        TechnicalLiaisonEngineer,
        
        /// <remarks/>
        TechnicalManager,
        
        /// <remarks/>
        Technician,
        
        /// <remarks/>
        TechnicianPerformingArts,
        
        /// <remarks/>
        TelecommunicationConsultant,
        
        /// <remarks/>
        TelecommunicationsEngineer,
        
        /// <remarks/>
        TelecommunicationsManager,
        
        /// <remarks/>
        Telegraphist,
        
        /// <remarks/>
        Telemarketeer,
        
        /// <remarks/>
        TelephoneEngineer,
        
        /// <remarks/>
        Telephonist,
        
        /// <remarks/>
        TelesalesAgent,
        
        /// <remarks/>
        TelesalesPerson,
        
        /// <remarks/>
        TelevisionDirector,
        
        /// <remarks/>
        TelevisionEngineer,
        
        /// <remarks/>
        TelevisionPresenter,
        
        /// <remarks/>
        TelevisionProducer,
        
        /// <remarks/>
        TelexOperator,
        
        /// <remarks/>
        TemperatureTimeRecorder,
        
        /// <remarks/>
        TennisCoach,
        
        /// <remarks/>
        Terrier,
        
        /// <remarks/>
        TextileConsultant,
        
        /// <remarks/>
        TextileEngineer,
        
        /// <remarks/>
        TextilePrinter,
        
        /// <remarks/>
        TextileTechnician,
        
        /// <remarks/>
        TextileWorker,
        
        /// <remarks/>
        Thatcher,
        
        /// <remarks/>
        TheatreManager,
        
        /// <remarks/>
        TheatreTechnician,
        
        /// <remarks/>
        TheatricalAgent,
        
        /// <remarks/>
        Therapist,
        
        /// <remarks/>
        ThermalEngineer,
        
        /// <remarks/>
        ThermalInsulator,
        
        /// <remarks/>
        TicketAgent,
        
        /// <remarks/>
        TicketInspector,
        
        /// <remarks/>
        Tiler,
        
        /// <remarks/>
        TimberInspector,
        
        /// <remarks/>
        TimberWorker,
        
        /// <remarks/>
        Tobacconist,
        
        /// <remarks/>
        TollCollector,
        
        /// <remarks/>
        ToolMaker,
        
        /// <remarks/>
        ToolSetter,
        
        /// <remarks/>
        TourAgent,
        
        /// <remarks/>
        TourCourier,
        
        /// <remarks/>
        TourGuide,
        
        /// <remarks/>
        TownClerk,
        
        /// <remarks/>
        TownPlanner,
        
        /// <remarks/>
        ToyMaker,
        
        /// <remarks/>
        ToyTrader,
        
        /// <remarks/>
        TrackWorker,
        
        /// <remarks/>
        TractorDriver,
        
        /// <remarks/>
        TractorMechanic,
        
        /// <remarks/>
        TradeMarkAgent,
        
        /// <remarks/>
        TradeUnionOfficial,
        
        /// <remarks/>
        TradingStandardsOfficer,
        
        /// <remarks/>
        TrafficClerk,
        
        /// <remarks/>
        TrafficEngineer,
        
        /// <remarks/>
        TrafficOfficer,
        
        /// <remarks/>
        TrafficPlanner,
        
        /// <remarks/>
        TrafficSupervisor,
        
        /// <remarks/>
        TrafficWarden,
        
        /// <remarks/>
        TrainDriver,
        
        /// <remarks/>
        TraineeManager,
        
        /// <remarks/>
        Trainer,
        
        /// <remarks/>
        TrainerAnimal,
        
        /// <remarks/>
        TrainerGreyhound,
        
        /// <remarks/>
        TrainerRaceHorse,
        
        /// <remarks/>
        TrainingAdvisor,
        
        /// <remarks/>
        TrainingAssistant,
        
        /// <remarks/>
        TrainingConsultant,
        
        /// <remarks/>
        TrainingCoOrdinator,
        
        /// <remarks/>
        TrainingInstructor,
        
        /// <remarks/>
        TrainingManager,
        
        /// <remarks/>
        TrainingOfficer,
        
        /// <remarks/>
        Transcriber,
        
        /// <remarks/>
        Translator,
        
        /// <remarks/>
        TransportClerk,
        
        /// <remarks/>
        TransportConsultant,
        
        /// <remarks/>
        TransportController,
        
        /// <remarks/>
        TransportEngineer,
        
        /// <remarks/>
        TransportManager,
        
        /// <remarks/>
        TransportOfficer,
        
        /// <remarks/>
        TransportPlanner,
        
        /// <remarks/>
        TravelAgent,
        
        /// <remarks/>
        TravelClerk,
        
        /// <remarks/>
        TravelConsultant,
        
        /// <remarks/>
        TravelCourier,
        
        /// <remarks/>
        TravelGuide,
        
        /// <remarks/>
        TravelGuideWriter,
        
        /// <remarks/>
        TravelRepresentative,
        
        /// <remarks/>
        TravellingShowman,
        
        /// <remarks/>
        Treasurer,
        
        /// <remarks/>
        TreeFeller,
        
        /// <remarks/>
        TreeSurgeon,
        
        /// <remarks/>
        Trichologist,
        
        /// <remarks/>
        TrinityHousePilot,
        
        /// <remarks/>
        TroutFarmer,
        
        /// <remarks/>
        TshirtPrinter,
        
        /// <remarks/>
        TugSkipper,
        
        /// <remarks/>
        Tunneller,
        
        /// <remarks/>
        TurfAccountant,
        
        /// <remarks/>
        TurkeyFarmer,
        
        /// <remarks/>
        Turner,
        
        /// <remarks/>
        Tutor,
        
        /// <remarks/>
        TvAndVideoInstaller,
        
        /// <remarks/>
        TvAndVideoRepairer,
        
        /// <remarks/>
        TvEditor,
        
        /// <remarks/>
        Typesetter,
        
        /// <remarks/>
        TypewriterEngineer,
        
        /// <remarks/>
        Typist,
        
        /// <remarks/>
        TyreBuilder,
        
        /// <remarks/>
        TyreFitter,
        
        /// <remarks/>
        TyreInspector,
        
        /// <remarks/>
        TyreTechnician,
        
        /// <remarks/>
        Umpire,
        
        /// <remarks/>
        Undertaker,
        
        /// <remarks/>
        Underwriter,
        
        /// <remarks/>
        Unemployed,
        
        /// <remarks/>
        Upholsterer,
        
        /// <remarks/>
        Usher,
        
        /// <remarks/>
        Valuer,
        
        /// <remarks/>
        ValveTechnician,
        
        /// <remarks/>
        VanDriver,
        
        /// <remarks/>
        VduOperator,
        
        /// <remarks/>
        VehicleAssessor,
        
        /// <remarks/>
        VehicleBodyWorker,
        
        /// <remarks/>
        VehicleEngineer,
        
        /// <remarks/>
        VehicleTechnician,
        
        /// <remarks/>
        VendingMachineFiller,
        
        /// <remarks/>
        VendingMachineTechnician,
        
        /// <remarks/>
        Ventriloquist,
        
        /// <remarks/>
        Verger,
        
        /// <remarks/>
        VeterinaryAssistant,
        
        /// <remarks/>
        VeterinarySurgeon,
        
        /// <remarks/>
        Vicar,
        
        /// <remarks/>
        ViolinMaker,
        
        /// <remarks/>
        VoluntaryWorker,
        
        /// <remarks/>
        WagesClerk,
        
        /// <remarks/>
        Waiter,
        
        /// <remarks/>
        WaiterOrWaitressLicensed,
        
        /// <remarks/>
        WaiterOrWaitressUnlicensed,
        
        /// <remarks/>
        WaitingStaff,
        
        /// <remarks/>
        Waitress,
        
        /// <remarks/>
        WarehouseManager,
        
        /// <remarks/>
        Warehouseman,
        
        /// <remarks/>
        WarehousemanOrWoman,
        
        /// <remarks/>
        Warehousewoman,
        
        /// <remarks/>
        WasteDealer,
        
        /// <remarks/>
        WastePaperMerchant,
        
        /// <remarks/>
        Watchmaker,
        
        /// <remarks/>
        WaterDiviner,
        
        /// <remarks/>
        WaterIndustryWorker,
        
        /// <remarks/>
        Weaver,
        
        /// <remarks/>
        WebDesigner,
        
        /// <remarks/>
        WeighbridgeClerk,
        
        /// <remarks/>
        WeighbridgeOperator,
        
        /// <remarks/>
        Welder,
        
        /// <remarks/>
        WelfareAssistant,
        
        /// <remarks/>
        WelfareOfficer,
        
        /// <remarks/>
        WelfareRightsOfficer,
        
        /// <remarks/>
        WheelClamper,
        
        /// <remarks/>
        WholesaleNewspaperDeliveryDriver,
        
        /// <remarks/>
        Wholesaler,
        
        /// <remarks/>
        WindowCleaner,
        
        /// <remarks/>
        WindowDresser,
        
        /// <remarks/>
        WindscreenFitter,
        
        /// <remarks/>
        WineMerchant,
        
        /// <remarks/>
        WoodCarver,
        
        /// <remarks/>
        WoodCutter,
        
        /// <remarks/>
        WoodWorker,
        
        /// <remarks/>
        WoolSorter,
        
        /// <remarks/>
        WordProcessingOperator,
        
        /// <remarks/>
        WorksManager,
        
        /// <remarks/>
        Writer,
        
        /// <remarks/>
        YachtMaster,
        
        /// <remarks/>
        YardManager,
        
        /// <remarks/>
        YogaTeacher,
        
        /// <remarks/>
        YouthHostelWarden,
        
        /// <remarks/>
        YouthWorker,
        
        /// <remarks/>
        ZooKeeper,
        
        /// <remarks/>
        ZooManager,
        
        /// <remarks/>
        Zoologist,
        
        /// <remarks/>
        ZoologyConsultant,
        
        /// <remarks/>
        BookmakerOnCourse,
        
        /// <remarks/>
        CatteryEmployee,
        
        /// <remarks/>
        CatteryOwner,
        
        /// <remarks/>
        AccountsTechnician,
        
        /// <remarks/>
        BusinessDevelopmentManager,
        
        /// <remarks/>
        CallEvaluator,
        
        /// <remarks/>
        DirectorFinance,
        
        /// <remarks/>
        DirectorHumanResources,
        
        /// <remarks/>
        DirectorProduct,
        
        /// <remarks/>
        Principal,
        
        /// <remarks/>
        VisualMerchandiser,
        
        /// <remarks/>
        WholesaleDistributor,
        
        /// <remarks/>
        WaterBailiff,
        
        /// <remarks/>
        ShopholdersWhereDeliveryAsAFeature,
        
        /// <remarks/>
        ShopholdersWhereDeliveryIsNotAFeature,
        
        /// <remarks/>
        ScaffoldingContractor,
        
        /// <remarks/>
        ContractCourier,
        
        /// <remarks/>
        ArmyNavalPersonnel,
        
        /// <remarks/>
        FreightForwarding,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum EmployersBusinessType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        AerospaceIndustry,
        
        /// <remarks/>
        AgriculturalEngineer,
        
        /// <remarks/>
        AgriculturalProduceDistribution,
        
        /// <remarks/>
        Agriculture,
        
        /// <remarks/>
        AircraftConstruction,
        
        /// <remarks/>
        AircraftMaintenance,
        
        /// <remarks/>
        AircraftRepair,
        
        /// <remarks/>
        Airline,
        
        /// <remarks/>
        AirportServices,
        
        /// <remarks/>
        AmbulanceAuthority,
        
        /// <remarks/>
        Amusement,
        
        /// <remarks/>
        AmusementArcade,
        
        /// <remarks/>
        AmusementMachineSupplier,
        
        /// <remarks/>
        AnimalBreeding,
        
        /// <remarks/>
        AnimalFeeds,
        
        /// <remarks/>
        AnimalRescueHome,
        
        /// <remarks/>
        AnimalTraining,
        
        /// <remarks/>
        Anthropology,
        
        /// <remarks/>
        AntiqueRestoration,
        
        /// <remarks/>
        Antiques,
        
        /// <remarks/>
        ArableFarming,
        
        /// <remarks/>
        Arbitration,
        
        /// <remarks/>
        Architecture,
        
        /// <remarks/>
        ArmedForcesForeign,
        
        /// <remarks/>
        ArmedForcesRepublicOfIreland,
        
        /// <remarks/>
        Art,
        
        /// <remarks/>
        ArtGallery,
        
        /// <remarks/>
        ArtRestoration,
        
        /// <remarks/>
        ArtValuation,
        
        /// <remarks/>
        AsphaltContractor,
        
        /// <remarks/>
        Assessor,
        
        /// <remarks/>
        Astrology,
        
        /// <remarks/>
        Astronomy,
        
        /// <remarks/>
        AuctionHouse,
        
        /// <remarks/>
        Auctioneer,
        
        /// <remarks/>
        Auditors,
        
        /// <remarks/>
        BabyFoodManufacturer,
        
        /// <remarks/>
        BabyGoodsManufacturer,
        
        /// <remarks/>
        BabyGoodsShop,
        
        /// <remarks/>
        BagpipeMaker,
        
        /// <remarks/>
        BakersSupplies,
        
        /// <remarks/>
        Bakery,
        
        /// <remarks/>
        Banking,
        
        /// <remarks/>
        BarrelMakers,
        
        /// <remarks/>
        BathroomDesign,
        
        /// <remarks/>
        BathroomInstallation,
        
        /// <remarks/>
        Beautician,
        
        /// <remarks/>
        BeautySalon,
        
        /// <remarks/>
        BettingShop,
        
        /// <remarks/>
        BingoHall,
        
        /// <remarks/>
        Blacksmith,
        
        /// <remarks/>
        BlastCleaning,
        
        /// <remarks/>
        BlindInstallation,
        
        /// <remarks/>
        BlindManufacturer,
        
        /// <remarks/>
        BoardingKennel,
        
        /// <remarks/>
        BoatBuilder,
        
        /// <remarks/>
        BoatHirer,
        
        /// <remarks/>
        BookmakerOffCourse,
        
        /// <remarks/>
        BookmakerOnCourse,
        
        /// <remarks/>
        Booksellers,
        
        /// <remarks/>
        BottledGasSupplier,
        
        /// <remarks/>
        BrassFoundry,
        
        /// <remarks/>
        BreakdownRecovery,
        
        /// <remarks/>
        Breeding,
        
        /// <remarks/>
        Brewery,
        
        /// <remarks/>
        BreweryTransport,
        
        /// <remarks/>
        BrickManufacturer,
        
        /// <remarks/>
        BrickSupplier,
        
        /// <remarks/>
        Broadcasting,
        
        /// <remarks/>
        Builder,
        
        /// <remarks/>
        BuildersMerchant,
        
        /// <remarks/>
        BuildingSociety,
        
        /// <remarks/>
        BuildingTrade,
        
        /// <remarks/>
        BusinessConsultancy,
        
        /// <remarks/>
        BusinessSystems,
        
        /// <remarks/>
        BusinessTraining,
        
        /// <remarks/>
        Butchers,
        
        /// <remarks/>
        CabinetMaker,
        
        /// <remarks/>
        CableManufacturer,
        
        /// <remarks/>
        CableTVInstallation,
        
        /// <remarks/>
        Cafe,
        
        /// <remarks/>
        CampSite,
        
        /// <remarks/>
        CandleDealer,
        
        /// <remarks/>
        CarAccessoryDealer,
        
        /// <remarks/>
        CarDelivery,
        
        /// <remarks/>
        CarHire,
        
        /// <remarks/>
        CarParkOperator,
        
        /// <remarks/>
        CarSales,
        
        /// <remarks/>
        CarValeting,
        
        /// <remarks/>
        CaravanHirer,
        
        /// <remarks/>
        CaravanSales,
        
        /// <remarks/>
        CaravanService,
        
        /// <remarks/>
        CaravanSite,
        
        /// <remarks/>
        Carpentry,
        
        /// <remarks/>
        CarpetFitting,
        
        /// <remarks/>
        Cartography,
        
        /// <remarks/>
        CashAndCarry,
        
        /// <remarks/>
        Casino,
        
        /// <remarks/>
        CaskMaker,
        
        /// <remarks/>
        CatalogueCoordination,
        
        /// <remarks/>
        CatalogueDistribution,
        
        /// <remarks/>
        CateringLicensed,
        
        /// <remarks/>
        CateringUnlicensed,
        
        /// <remarks/>
        Cattery,
        
        /// <remarks/>
        CeilingContractor,
        
        /// <remarks/>
        CementSuppliers,
        
        /// <remarks/>
        CentralHeatingServices,
        
        /// <remarks/>
        Charity,
        
        /// <remarks/>
        Chartering,
        
        /// <remarks/>
        ChemicalIndustry,
        
        /// <remarks/>
        ChemicalManufacturer,
        
        /// <remarks/>
        ChemistShop,
        
        /// <remarks/>
        ChildMinding,
        
        /// <remarks/>
        ChildrensPanel,
        
        /// <remarks/>
        ChimneySweeping,
        
        /// <remarks/>
        Chiropody,
        
        /// <remarks/>
        Choreography,
        
        /// <remarks/>
        Cinema,
        
        /// <remarks/>
        Circus,
        
        /// <remarks/>
        CitizensAdviceBureau,
        
        /// <remarks/>
        CivilAviation,
        
        /// <remarks/>
        CivilEngineering,
        
        /// <remarks/>
        CivilService,
        
        /// <remarks/>
        CleaningServices,
        
        /// <remarks/>
        ClericalServices,
        
        /// <remarks/>
        ClockAndWatchManufacturer,
        
        /// <remarks/>
        ClockAndWatchRepair,
        
        /// <remarks/>
        ClothingManufacturer,
        
        /// <remarks/>
        ClothingTrade,
        
        /// <remarks/>
        Club,
        
        /// <remarks/>
        CoachHirer,
        
        /// <remarks/>
        Coachbuilder,
        
        /// <remarks/>
        CoalIndustry,
        
        /// <remarks/>
        CoalMerchant,
        
        /// <remarks/>
        CoffeeShop,
        
        /// <remarks/>
        CoinAndMedalDealer,
        
        /// <remarks/>
        ColdStore,
        
        /// <remarks/>
        CommissionersForOaths,
        
        /// <remarks/>
        Commodities,
        
        /// <remarks/>
        CommodityBrokerage,
        
        /// <remarks/>
        Communications,
        
        /// <remarks/>
        CommunityService,
        
        /// <remarks/>
        ComputerAidedDesign,
        
        /// <remarks/>
        ComputerDistribution,
        
        /// <remarks/>
        ComputerSales,
        
        /// <remarks/>
        ComputerServices,
        
        /// <remarks/>
        ComputerSupplies,
        
        /// <remarks/>
        Computers,
        
        /// <remarks/>
        ComputersHardware,
        
        /// <remarks/>
        ComputersSoftware,
        
        /// <remarks/>
        ConcreteSupplier,
        
        /// <remarks/>
        ConfectioneryManufacturer,
        
        /// <remarks/>
        ConstructionIndustry,
        
        /// <remarks/>
        ConsultingEngineering,
        
        /// <remarks/>
        ContactLensManufacturer,
        
        /// <remarks/>
        ContainerHire,
        
        /// <remarks/>
        Conveyancers,
        
        /// <remarks/>
        CorporateHospitality,
        
        /// <remarks/>
        Cosmetics,
        
        /// <remarks/>
        Costumiers,
        
        /// <remarks/>
        CottonMill,
        
        /// <remarks/>
        CourierServices,
        
        /// <remarks/>
        CraneHire,
        
        /// <remarks/>
        CraneManufacturer,
        
        /// <remarks/>
        CropSpraying,
        
        /// <remarks/>
        CustomsAndExcise,
        
        /// <remarks/>
        CutleryCraftsmen,
        
        /// <remarks/>
        CycleHire,
        
        /// <remarks/>
        CycleShop,
        
        /// <remarks/>
        Dairy,
        
        /// <remarks/>
        DairyFarming,
        
        /// <remarks/>
        DataProcessing,
        
        /// <remarks/>
        DataProtection,
        
        /// <remarks/>
        DatingAgency,
        
        /// <remarks/>
        DebtCollection,
        
        /// <remarks/>
        Decorating,
        
        /// <remarks/>
        Delicatessen,
        
        /// <remarks/>
        DeliveryService,
        
        /// <remarks/>
        Demolition,
        
        /// <remarks/>
        Dentistry,
        
        /// <remarks/>
        DepartmentStore,
        
        /// <remarks/>
        DesignConsultancy,
        
        /// <remarks/>
        DesktopPublishingServices,
        
        /// <remarks/>
        DespatchServices,
        
        /// <remarks/>
        DiplomaticService,
        
        /// <remarks/>
        Discotheque,
        
        /// <remarks/>
        Distillers,
        
        /// <remarks/>
        Distribution,
        
        /// <remarks/>
        DIYStore,
        
        /// <remarks/>
        DockAuthority,
        
        /// <remarks/>
        DomesticApplianceMaintenance,
        
        /// <remarks/>
        DomesticService,
        
        /// <remarks/>
        DoubleGlazing,
        
        /// <remarks/>
        Drapery,
        
        /// <remarks/>
        DrivingAuthority,
        
        /// <remarks/>
        DrivingInstruction,
        
        /// <remarks/>
        DrivingSchool,
        
        /// <remarks/>
        DryCleaning,
        
        /// <remarks/>
        EarthRemovers,
        
        /// <remarks/>
        Ecology,
        
        /// <remarks/>
        Education,
        
        /// <remarks/>
        EducationPrivate,
        
        /// <remarks/>
        EducationState,
        
        /// <remarks/>
        EffluentDisposal,
        
        /// <remarks/>
        EggMerchants,
        
        /// <remarks/>
        ElectricalApplianceManufacturer,
        
        /// <remarks/>
        ElectricalContractors,
        
        /// <remarks/>
        ElectricalGoodsConsultancy,
        
        /// <remarks/>
        ElectricityIndustry,
        
        /// <remarks/>
        Electronics,
        
        /// <remarks/>
        Embossers,
        
        /// <remarks/>
        EmergencyServices,
        
        /// <remarks/>
        EmploymentAgency,
        
        /// <remarks/>
        EnergyConsultancy,
        
        /// <remarks/>
        Engineering,
        
        /// <remarks/>
        EngineeringConsultants,
        
        /// <remarks/>
        Engraving,
        
        /// <remarks/>
        Entertainment,
        
        /// <remarks/>
        EnvironmentalHealth,
        
        /// <remarks/>
        EstateAgency,
        
        /// <remarks/>
        Excavation,
        
        /// <remarks/>
        ExhibitionCentre,
        
        /// <remarks/>
        ExhibitionOrganisers,
        
        /// <remarks/>
        Export,
        
        /// <remarks/>
        ExportAgency,
        
        /// <remarks/>
        Exporter,
        
        /// <remarks/>
        FabricManufacturer,
        
        /// <remarks/>
        Fabrications,
        
        /// <remarks/>
        Fairground,
        
        /// <remarks/>
        Falconry,
        
        /// <remarks/>
        FancyGoods,
        
        /// <remarks/>
        FancyGoodsImporter,
        
        /// <remarks/>
        Farming,
        
        /// <remarks/>
        FasciaBoardInstaller,
        
        /// <remarks/>
        Fashion,
        
        /// <remarks/>
        FashionDesign,
        
        /// <remarks/>
        FashionHouse,
        
        /// <remarks/>
        FastFood,
        
        /// <remarks/>
        FencingManufacturer,
        
        /// <remarks/>
        FerryService,
        
        /// <remarks/>
        FertilizerManufacturer,
        
        /// <remarks/>
        FibreGlassManufacturer,
        
        /// <remarks/>
        FillingStation,
        
        /// <remarks/>
        FilmManufacturing,
        
        /// <remarks/>
        FilmProcessing,
        
        /// <remarks/>
        FilmProduction,
        
        /// <remarks/>
        FinanceCompany,
        
        /// <remarks/>
        FinancialAdvisors,
        
        /// <remarks/>
        FinancialServices,
        
        /// <remarks/>
        FireProtection,
        
        /// <remarks/>
        FireplaceInstaller,
        
        /// <remarks/>
        FireplaceManufacturer,
        
        /// <remarks/>
        FishAndChipShop,
        
        /// <remarks/>
        FishFarm,
        
        /// <remarks/>
        FishMerchants,
        
        /// <remarks/>
        Fishing,
        
        /// <remarks/>
        Fishmonger,
        
        /// <remarks/>
        FittedBedroomInstaller,
        
        /// <remarks/>
        FittedKitchenInstaller,
        
        /// <remarks/>
        FlooringConstruction,
        
        /// <remarks/>
        FlooringInstaller,
        
        /// <remarks/>
        FlooringServices,
        
        /// <remarks/>
        Florists,
        
        /// <remarks/>
        FlyingSchool,
        
        /// <remarks/>
        FoodExporter,
        
        /// <remarks/>
        FoodImporter,
        
        /// <remarks/>
        FoodManufacturer,
        
        /// <remarks/>
        FoodProduction,
        
        /// <remarks/>
        FoodStore,
        
        /// <remarks/>
        FootballPools,
        
        /// <remarks/>
        Forestry,
        
        /// <remarks/>
        FosteringOrAdoptionAgency,
        
        /// <remarks/>
        Foundry,
        
        /// <remarks/>
        FreezerCentre,
        
        /// <remarks/>
        Freight,
        
        /// <remarks/>
        FreightAgents,
        
        /// <remarks/>
        FreightForwarders,
        
        /// <remarks/>
        FrenchPolishing,
        
        /// <remarks/>
        FriendlySociety,
        
        /// <remarks/>
        FrozenFoodDistribution,
        
        /// <remarks/>
        FuelDistribution,
        
        /// <remarks/>
        FuelMerchant,
        
        /// <remarks/>
        FuneralDirector,
        
        /// <remarks/>
        FurTrade,
        
        /// <remarks/>
        FurnitureInstaller,
        
        /// <remarks/>
        FurnitureManufacture,
        
        /// <remarks/>
        FurnitureRemover,
        
        /// <remarks/>
        FurnitureRepair,
        
        /// <remarks/>
        FurnitureSales,
        
        /// <remarks/>
        FurnitureStore,
        
        /// <remarks/>
        FurnitureStorer,
        
        /// <remarks/>
        Furriers,
        
        /// <remarks/>
        Gambling,
        
        /// <remarks/>
        GameBreeders,
        
        /// <remarks/>
        Garage,
        
        /// <remarks/>
        GardenCentre,
        
        /// <remarks/>
        Gardening,
        
        /// <remarks/>
        GasOffshore,
        
        /// <remarks/>
        GasExploration,
        
        /// <remarks/>
        Abattoir,
        
        /// <remarks/>
        Accountancy,
        
        /// <remarks/>
        AcousticEngineer,
        
        /// <remarks/>
        ActuarialConsultancy,
        
        /// <remarks/>
        Acupuncture,
        
        /// <remarks/>
        AddressingOrCircularisingServices,
        
        /// <remarks/>
        Adjuster,
        
        /// <remarks/>
        Advertising,
        
        /// <remarks/>
        AerialErector,
        
        /// <remarks/>
        AerialManufacturer,
        
        /// <remarks/>
        AerialPhotography,
        
        /// <remarks/>
        AerialSupplier,
        
        /// <remarks/>
        AerialSurvey,
        
        /// <remarks/>
        GasIndustry,
        
        /// <remarks/>
        Genealogy,
        
        /// <remarks/>
        GeneralDealer,
        
        /// <remarks/>
        GeneralStore,
        
        /// <remarks/>
        GiftShop,
        
        /// <remarks/>
        GlassManufacture,
        
        /// <remarks/>
        Glaziers,
        
        /// <remarks/>
        GolfClub,
        
        /// <remarks/>
        GovernmentForeign,
        
        /// <remarks/>
        GovernmentRepublicOfIreland,
        
        /// <remarks/>
        GownTrade,
        
        /// <remarks/>
        GrainMerchants,
        
        /// <remarks/>
        GrainMill,
        
        /// <remarks/>
        GraphicDesign,
        
        /// <remarks/>
        Graphology,
        
        /// <remarks/>
        Greengrocer,
        
        /// <remarks/>
        GreetingCardManufacturer,
        
        /// <remarks/>
        GreetingCardSales,
        
        /// <remarks/>
        GreyhoundRacing,
        
        /// <remarks/>
        Greyhounds,
        
        /// <remarks/>
        GritBlasters,
        
        /// <remarks/>
        Grocer,
        
        /// <remarks/>
        GroundMaintenance,
        
        /// <remarks/>
        GuestHouseLicensed,
        
        /// <remarks/>
        GuestHouseUnlicensed,
        
        /// <remarks/>
        GutteringInstaller,
        
        /// <remarks/>
        Hairdressing,
        
        /// <remarks/>
        HarbourAuthority,
        
        /// <remarks/>
        HarbourBoard,
        
        /// <remarks/>
        HardwareManufacturer,
        
        /// <remarks/>
        HardwareRetailer,
        
        /// <remarks/>
        HaulageContractors,
        
        /// <remarks/>
        HazardousChemicalTransporters,
        
        /// <remarks/>
        HealthAuthority,
        
        /// <remarks/>
        HealthCareNHS,
        
        /// <remarks/>
        HealthCarePrivate,
        
        /// <remarks/>
        HealthCentre,
        
        /// <remarks/>
        HealthClub,
        
        /// <remarks/>
        HealthProductsDistribution,
        
        /// <remarks/>
        HeatingConsultant,
        
        /// <remarks/>
        HeatingServices,
        
        /// <remarks/>
        AvivaStaff,
        
        /// <remarks/>
        HirePurchase,
        
        /// <remarks/>
        HobbyShop,
        
        /// <remarks/>
        HolidayAccommodation,
        
        /// <remarks/>
        HolidayCamp,
        
        /// <remarks/>
        HolidayCentre,
        
        /// <remarks/>
        HomeHelpServices,
        
        /// <remarks/>
        HoneyProducer,
        
        /// <remarks/>
        Horses,
        
        /// <remarks/>
        Horticulture,
        
        /// <remarks/>
        Hospital,
        
        /// <remarks/>
        HotelLicensed,
        
        /// <remarks/>
        HotelUnlicensed,
        
        /// <remarks/>
        HouseBuilders,
        
        /// <remarks/>
        Househusband,
        
        /// <remarks/>
        Housewife,
        
        /// <remarks/>
        HousingAssociation,
        
        /// <remarks/>
        HousingDevelopers,
        
        /// <remarks/>
        Hypermarket,
        
        /// <remarks/>
        IceCream,
        
        /// <remarks/>
        IceCreamManufacturer,
        
        /// <remarks/>
        IceCreamShop,
        
        /// <remarks/>
        IceMerchant,
        
        /// <remarks/>
        IceRink,
        
        /// <remarks/>
        Import,
        
        /// <remarks/>
        Importers,
        
        /// <remarks/>
        IndustrialBuildingManufacturer,
        
        /// <remarks/>
        IndustrialRelations,
        
        /// <remarks/>
        InformationTechnology,
        
        /// <remarks/>
        InlandRevenue,
        
        /// <remarks/>
        Inn,
        
        /// <remarks/>
        InspectionServices,
        
        /// <remarks/>
        InstantPrintServices,
        
        /// <remarks/>
        InsulationEngineers,
        
        /// <remarks/>
        Insurance,
        
        /// <remarks/>
        InsuranceAdvisor,
        
        /// <remarks/>
        InsuranceBroker,
        
        /// <remarks/>
        InsuranceCompany,
        
        /// <remarks/>
        InsuranceConsultant,
        
        /// <remarks/>
        InteriorDesign,
        
        /// <remarks/>
        Investment,
        
        /// <remarks/>
        IronFoundry,
        
        /// <remarks/>
        IroningServices,
        
        /// <remarks/>
        Ironmonger,
        
        /// <remarks/>
        JamAndPreserveManufacturer,
        
        /// <remarks/>
        Jewellers,
        
        /// <remarks/>
        Jewellery,
        
        /// <remarks/>
        JewelleryManufacturer,
        
        /// <remarks/>
        Joinery,
        
        /// <remarks/>
        KeepFit,
        
        /// <remarks/>
        Kennels,
        
        /// <remarks/>
        KitchenEquipmentManufacturer,
        
        /// <remarks/>
        KitchenManufacturer,
        
        /// <remarks/>
        KitchenPlanners,
        
        /// <remarks/>
        KnitwearManufacturer,
        
        /// <remarks/>
        Laboratory,
        
        /// <remarks/>
        LadderManufacturer,
        
        /// <remarks/>
        LandClearance,
        
        /// <remarks/>
        LandDraining,
        
        /// <remarks/>
        Landscaping,
        
        /// <remarks/>
        LatheManufacturer,
        
        /// <remarks/>
        Launderette,
        
        /// <remarks/>
        Laundry,
        
        /// <remarks/>
        LawAndOrder,
        
        /// <remarks/>
        LawnmowersAndGardenMachinery,
        
        /// <remarks/>
        Lawyers,
        
        /// <remarks/>
        LeasingCompany,
        
        /// <remarks/>
        LegalSystem,
        
        /// <remarks/>
        LeisureCentre,
        
        /// <remarks/>
        LensManufacturer,
        
        /// <remarks/>
        Library,
        
        /// <remarks/>
        LiftInstallers,
        
        /// <remarks/>
        LiftMaintenance,
        
        /// <remarks/>
        LightingInstallers,
        
        /// <remarks/>
        LinenHire,
        
        /// <remarks/>
        LiveryStables,
        
        /// <remarks/>
        LivestockCarriers,
        
        /// <remarks/>
        LivestockFarming,
        
        /// <remarks/>
        LocalGovernment,
        
        /// <remarks/>
        LocalGovernmentAuthority,
        
        /// <remarks/>
        LocalNewspaper,
        
        /// <remarks/>
        Locksmiths,
        
        /// <remarks/>
        LoftInsulation,
        
        /// <remarks/>
        LogAndFirewood,
        
        /// <remarks/>
        LossAdjusting,
        
        /// <remarks/>
        LPGSuppliers,
        
        /// <remarks/>
        MachineToolSupplier,
        
        /// <remarks/>
        MachineryDealers,
        
        /// <remarks/>
        MailOrder,
        
        /// <remarks/>
        MailOrderSupplier,
        
        /// <remarks/>
        MaintenanceServices,
        
        /// <remarks/>
        ManagementConsultancy,
        
        /// <remarks/>
        ManagementTraining,
        
        /// <remarks/>
        MantleTrade,
        
        /// <remarks/>
        Manufacturing,
        
        /// <remarks/>
        ManufacturingChemist,
        
        /// <remarks/>
        Marina,
        
        /// <remarks/>
        MarketGarden,
        
        /// <remarks/>
        MarketGardeners,
        
        /// <remarks/>
        MarketResearch,
        
        /// <remarks/>
        MarketTrading,
        
        /// <remarks/>
        Marketing,
        
        /// <remarks/>
        MarriageGuidance,
        
        /// <remarks/>
        MaterialManufacturer,
        
        /// <remarks/>
        MattressManufacturer,
        
        /// <remarks/>
        MeatMarket,
        
        /// <remarks/>
        MeatProducts,
        
        /// <remarks/>
        MechanicalHandling,
        
        /// <remarks/>
        MedicalResearch,
        
        /// <remarks/>
        MedicalServices,
        
        /// <remarks/>
        MedicalSuppliers,
        
        /// <remarks/>
        MerchantNavy,
        
        /// <remarks/>
        MetalFounders,
        
        /// <remarks/>
        MetalTreatment,
        
        /// <remarks/>
        MicrofilmServices,
        
        /// <remarks/>
        MilkDelivery,
        
        /// <remarks/>
        Mining,
        
        /// <remarks/>
        MobileFood,
        
        /// <remarks/>
        MobileShop,
        
        /// <remarks/>
        ModelManufacturer,
        
        /// <remarks/>
        Moneylenders,
        
        /// <remarks/>
        MonumentalMasons,
        
        /// <remarks/>
        MotorFactorOrParts,
        
        /// <remarks/>
        MotorManufacture,
        
        /// <remarks/>
        MotorOrganisation,
        
        /// <remarks/>
        MotorTrade,
        
        /// <remarks/>
        MotorcarRacing,
        
        /// <remarks/>
        MotorcycleRacing,
        
        /// <remarks/>
        MotorcycleTrade,
        
        /// <remarks/>
        MotoringOrganisation,
        
        /// <remarks/>
        Museums,
        
        /// <remarks/>
        MusicPublisher,
        
        /// <remarks/>
        MusicRetailer,
        
        /// <remarks/>
        MusicSchool,
        
        /// <remarks/>
        MusicalInstrumentManufacturer,
        
        /// <remarks/>
        NationalNewspaper,
        
        /// <remarks/>
        NationalTrust,
        
        /// <remarks/>
        NationalTrustForScotland,
        
        /// <remarks/>
        Newsagents,
        
        /// <remarks/>
        NewspaperWholesaler,
        
        /// <remarks/>
        NightClub,
        
        /// <remarks/>
        NoiseControl,
        
        /// <remarks/>
        NotInEmployment,
        
        /// <remarks/>
        Notaries,
        
        /// <remarks/>
        Nursery,
        
        /// <remarks/>
        NurserySchool,
        
        /// <remarks/>
        NursingHome,
        
        /// <remarks/>
        OceanographicSurvey,
        
        /// <remarks/>
        OffLicence,
        
        /// <remarks/>
        OffLicenceStore,
        
        /// <remarks/>
        OfficeEquipmentRepairer,
        
        /// <remarks/>
        OfficeEquipmentSupplier,
        
        /// <remarks/>
        OfficeFitters,
        
        /// <remarks/>
        OfficeServices,
        
        /// <remarks/>
        OilOffshore,
        
        /// <remarks/>
        OilCompany,
        
        /// <remarks/>
        OilDistributors,
        
        /// <remarks/>
        OilExploration,
        
        /// <remarks/>
        OilTerminalOperator,
        
        /// <remarks/>
        OpinionPolls,
        
        /// <remarks/>
        OpticalServices,
        
        /// <remarks/>
        Optician,
        
        /// <remarks/>
        Optometrist,
        
        /// <remarks/>
        OrganBuilding,
        
        /// <remarks/>
        OutdoorPursuits,
        
        /// <remarks/>
        OverallHireAndMaintenance,
        
        /// <remarks/>
        PackersAndStorers,
        
        /// <remarks/>
        PaintManufacturer,
        
        /// <remarks/>
        PaintSpraying,
        
        /// <remarks/>
        PainterAndDecorator,
        
        /// <remarks/>
        Painting,
        
        /// <remarks/>
        PaintingContractor,
        
        /// <remarks/>
        PanelBeating,
        
        /// <remarks/>
        PaperManufacture,
        
        /// <remarks/>
        PaperbagAndSackManufacturer,
        
        /// <remarks/>
        ParcelDelivery,
        
        /// <remarks/>
        PartitionErector,
        
        /// <remarks/>
        PassengerTransport,
        
        /// <remarks/>
        PatentOffice,
        
        /// <remarks/>
        Pawnbroker,
        
        /// <remarks/>
        PerformingArts,
        
        /// <remarks/>
        PersonnelConsultancy,
        
        /// <remarks/>
        PestAndVerminControl,
        
        /// <remarks/>
        PetServices,
        
        /// <remarks/>
        PetShop,
        
        /// <remarks/>
        PetrochemicalIndustry,
        
        /// <remarks/>
        PetrolPumpMaintenance,
        
        /// <remarks/>
        PetrolStation,
        
        /// <remarks/>
        PharmaceuticalSupplier,
        
        /// <remarks/>
        Pharmacy,
        
        /// <remarks/>
        PhotoEngraving,
        
        /// <remarks/>
        PhotoProcessingAndPrinting,
        
        /// <remarks/>
        PhotographicEquipmentRepairs,
        
        /// <remarks/>
        Photography,
        
        /// <remarks/>
        Physiotherapy,
        
        /// <remarks/>
        PianoSalesAndRepairs,
        
        /// <remarks/>
        PianoTuning,
        
        /// <remarks/>
        PictureFraming,
        
        /// <remarks/>
        PigFarming,
        
        /// <remarks/>
        PipeCleaning,
        
        /// <remarks/>
        PizzaDelivery,
        
        /// <remarks/>
        PlanningConsultancy,
        
        /// <remarks/>
        PlantHire,
        
        /// <remarks/>
        PlantManufacturer,
        
        /// <remarks/>
        PlantSales,
        
        /// <remarks/>
        PlasticSheetingManufacturer,
        
        /// <remarks/>
        PlasticsManufacture,
        
        /// <remarks/>
        PlaygroundEquipmentManufacturer,
        
        /// <remarks/>
        PlumbersMerchant,
        
        /// <remarks/>
        Plumbing,
        
        /// <remarks/>
        PlumbingAndHeating,
        
        /// <remarks/>
        PoliticalConsultancy,
        
        /// <remarks/>
        PoliticalParty,
        
        /// <remarks/>
        PollutionControl,
        
        /// <remarks/>
        PoolTableManufacturer,
        
        /// <remarks/>
        PoolTableRepairer,
        
        /// <remarks/>
        PoolTableSales,
        
        /// <remarks/>
        PortAuthority,
        
        /// <remarks/>
        PostOffice,
        
        /// <remarks/>
        PotatoMerchant,
        
        /// <remarks/>
        Pottery,
        
        /// <remarks/>
        PoultryFarm,
        
        /// <remarks/>
        PoultryFarming,
        
        /// <remarks/>
        PresentationMaterialsSupplier,
        
        /// <remarks/>
        PressCuttingAgency,
        
        /// <remarks/>
        PressureCleaning,
        
        /// <remarks/>
        PreStressedConcreteManufacturer,
        
        /// <remarks/>
        PrintTypeServices,
        
        /// <remarks/>
        Printer,
        
        /// <remarks/>
        Printing,
        
        /// <remarks/>
        PrintingEngineeringServices,
        
        /// <remarks/>
        PrisonService,
        
        /// <remarks/>
        PrivateHire,
        
        /// <remarks/>
        PrivateInvestigation,
        
        /// <remarks/>
        PrivateSchool,
        
        /// <remarks/>
        ProcessEngraving,
        
        /// <remarks/>
        ProduceImporters,
        
        /// <remarks/>
        ProjectManagement,
        
        /// <remarks/>
        PromotionalConsultancy,
        
        /// <remarks/>
        PropertyConsultants,
        
        /// <remarks/>
        PropertyDevelopers,
        
        /// <remarks/>
        PropertyLetting,
        
        /// <remarks/>
        PropertyOwner,
        
        /// <remarks/>
        PropertyServices,
        
        /// <remarks/>
        ProtectiveClothingManufacturer,
        
        /// <remarks/>
        ProtectiveClothingSupplier,
        
        /// <remarks/>
        Psychiatry,
        
        /// <remarks/>
        Psychology,
        
        /// <remarks/>
        Psychotherapy,
        
        /// <remarks/>
        PublicAddressSystemSupplier,
        
        /// <remarks/>
        PublicHire,
        
        /// <remarks/>
        PublicHirer,
        
        /// <remarks/>
        PublicHouse,
        
        /// <remarks/>
        PublicRelationConsultancy,
        
        /// <remarks/>
        PublicSchool,
        
        /// <remarks/>
        PublicTransport,
        
        /// <remarks/>
        Publishing,
        
        /// <remarks/>
        PublishingLocalPress,
        
        /// <remarks/>
        PublishingNationalPress,
        
        /// <remarks/>
        QualityAssurance,
        
        /// <remarks/>
        QuantitySurveyors,
        
        /// <remarks/>
        Quarry,
        
        /// <remarks/>
        Quarrying,
        
        /// <remarks/>
        RaceCourse,
        
        /// <remarks/>
        Racehorses,
        
        /// <remarks/>
        RacingOrRallies,
        
        /// <remarks/>
        RacingStable,
        
        /// <remarks/>
        RadiatorRepairs,
        
        /// <remarks/>
        RadiatorSales,
        
        /// <remarks/>
        Radiography,
        
        /// <remarks/>
        RagMerchants,
        
        /// <remarks/>
        Railway,
        
        /// <remarks/>
        RatingAndValuation,
        
        /// <remarks/>
        RecordCompany,
        
        /// <remarks/>
        RecordShop,
        
        /// <remarks/>
        RecordingServices,
        
        /// <remarks/>
        RecoveryServices,
        
        /// <remarks/>
        RecruitmentAgency,
        
        /// <remarks/>
        Recycling,
        
        /// <remarks/>
        Refrigeration,
        
        /// <remarks/>
        RefuseCollection,
        
        /// <remarks/>
        ReinforcedConcreteManufacturer,
        
        /// <remarks/>
        Religion,
        
        /// <remarks/>
        RemovalContractors,
        
        /// <remarks/>
        RemoverAndStorer,
        
        /// <remarks/>
        RescueServices,
        
        /// <remarks/>
        ResidentialHome,
        
        /// <remarks/>
        RestaurantLicensed,
        
        /// <remarks/>
        RestaurantUnlicensed,
        
        /// <remarks/>
        RetailerMobile,
        
        /// <remarks/>
        Retailing,
        
        /// <remarks/>
        Retired,
        
        /// <remarks/>
        RidingSchool,
        
        /// <remarks/>
        RingSports,
        
        /// <remarks/>
        RiverAuthority,
        
        /// <remarks/>
        RoadHaulage,
        
        /// <remarks/>
        RoadRepair,
        
        /// <remarks/>
        RoadSurfacing,
        
        /// <remarks/>
        RoboticsManufacturer,
        
        /// <remarks/>
        RollerShutterManufacturer,
        
        /// <remarks/>
        RoofingServices,
        
        /// <remarks/>
        RopeMerchant,
        
        /// <remarks/>
        Roughcasters,
        
        /// <remarks/>
        RSPCA,
        
        /// <remarks/>
        RubbishDisposal,
        
        /// <remarks/>
        RubbleRemovers,
        
        /// <remarks/>
        RustproofingServices,
        
        /// <remarks/>
        SaddlersAndHarnessMakers,
        
        /// <remarks/>
        SafeInstallationAndRemoval,
        
        /// <remarks/>
        SafeManufacturer,
        
        /// <remarks/>
        SafetyConsultancy,
        
        /// <remarks/>
        SafetyEquipmentSupplier,
        
        /// <remarks/>
        SailMakersAndRepairers,
        
        /// <remarks/>
        SailingEquipmentSupplier,
        
        /// <remarks/>
        Salvage,
        
        /// <remarks/>
        SampleDistribution,
        
        /// <remarks/>
        SampleDistributors,
        
        /// <remarks/>
        SandAndGravelMerchants,
        
        /// <remarks/>
        SandBlasters,
        
        /// <remarks/>
        SatelliteTVAndEquipmentSuppliers,
        
        /// <remarks/>
        SatelliteTVInstallers,
        
        /// <remarks/>
        SawSalesAndRepairs,
        
        /// <remarks/>
        Sawmill,
        
        /// <remarks/>
        ScaffoldingErection,
        
        /// <remarks/>
        ScaffoldingHire,
        
        /// <remarks/>
        School,
        
        /// <remarks/>
        SchoolForPerformingArts,
        
        /// <remarks/>
        ScientificResearch,
        
        /// <remarks/>
        ScrapDisposal,
        
        /// <remarks/>
        ScrapMetalMerchants,
        
        /// <remarks/>
        ScreenPrinting,
        
        /// <remarks/>
        Screenwriting,
        
        /// <remarks/>
        Sculptors,
        
        /// <remarks/>
        SecondhandDealers,
        
        /// <remarks/>
        SecretarialServices,
        
        /// <remarks/>
        SecretarialTraining,
        
        /// <remarks/>
        SecurityEquipment,
        
        /// <remarks/>
        SecurityServices,
        
        /// <remarks/>
        Seedsmen,
        
        /// <remarks/>
        SelfCateringAccommodation,
        
        /// <remarks/>
        SelfDriveHire,
        
        /// <remarks/>
        Servicing,
        
        /// <remarks/>
        SharpeningServices,
        
        /// <remarks/>
        SheetMetalWork,
        
        /// <remarks/>
        SheriffOfficers,
        
        /// <remarks/>
        ShipBuildingAndRepair,
        
        /// <remarks/>
        ShipChandlery,
        
        /// <remarks/>
        ShipPainting,
        
        /// <remarks/>
        Shipbroking,
        
        /// <remarks/>
        ShippingAndForwardingAgency,
        
        /// <remarks/>
        ShippingCompany,
        
        /// <remarks/>
        Shipyard,
        
        /// <remarks/>
        ShoeManufacturers,
        
        /// <remarks/>
        ShoeRepair,
        
        /// <remarks/>
        ShoeShop,
        
        /// <remarks/>
        ShopFitting,
        
        /// <remarks/>
        ShoppingCentre,
        
        /// <remarks/>
        ShotBlasters,
        
        /// <remarks/>
        ShutterManufacturer,
        
        /// <remarks/>
        SightseeingToursOperator,
        
        /// <remarks/>
        SignMaking,
        
        /// <remarks/>
        Signwriting,
        
        /// <remarks/>
        SiteClearance,
        
        /// <remarks/>
        SiteInvestigation,
        
        /// <remarks/>
        SkatingRink,
        
        /// <remarks/>
        SkiCentre,
        
        /// <remarks/>
        SkipHire,
        
        /// <remarks/>
        SkipMaintenance,
        
        /// <remarks/>
        Slaughterhouse,
        
        /// <remarks/>
        SlimmingDistribution,
        
        /// <remarks/>
        SnackBar,
        
        /// <remarks/>
        SnookerClub,
        
        /// <remarks/>
        SocialClub,
        
        /// <remarks/>
        SocialServices,
        
        /// <remarks/>
        SoftDrinksManufacturer,
        
        /// <remarks/>
        SoftDrinksSupplier,
        
        /// <remarks/>
        SoilEngineers,
        
        /// <remarks/>
        SolarPanelManufacturer,
        
        /// <remarks/>
        SolarPanelSupplier,
        
        /// <remarks/>
        Solicitors,
        
        /// <remarks/>
        SoundProofing,
        
        /// <remarks/>
        Spinners,
        
        /// <remarks/>
        Sports,
        
        /// <remarks/>
        SportsProfessional,
        
        /// <remarks/>
        SportsCentre,
        
        /// <remarks/>
        SportsClub,
        
        /// <remarks/>
        SportsGoodsShop,
        
        /// <remarks/>
        SportsGround,
        
        /// <remarks/>
        SportsPromotion,
        
        /// <remarks/>
        SportswearManufacturer,
        
        /// <remarks/>
        SportswearSupplier,
        
        /// <remarks/>
        Stables,
        
        /// <remarks/>
        StampDealers,
        
        /// <remarks/>
        StampManufacturer,
        
        /// <remarks/>
        StampSupplierStationers,
        
        /// <remarks/>
        Stationers,
        
        /// <remarks/>
        SteelIndustry,
        
        /// <remarks/>
        SteelStockholders,
        
        /// <remarks/>
        SterilisingServices,
        
        /// <remarks/>
        Stockbroking,
        
        /// <remarks/>
        Stonemasonry,
        
        /// <remarks/>
        StreetTrading,
        
        /// <remarks/>
        StructuralEngineering,
        
        /// <remarks/>
        Studio,
        
        /// <remarks/>
        Supermarket,
        
        /// <remarks/>
        Surveying,
        
        /// <remarks/>
        Surveyors,
        
        /// <remarks/>
        SuspendedCeilingRepairer,
        
        /// <remarks/>
        SwimmingPool,
        
        /// <remarks/>
        TailorAndOutfitter,
        
        /// <remarks/>
        TakeAwayFoodSupplier,
        
        /// <remarks/>
        TankCleaningServices,
        
        /// <remarks/>
        TarpaulinManufacturer,
        
        /// <remarks/>
        TarpaulinSuppliers,
        
        /// <remarks/>
        TattooParlourOrClinic,
        
        /// <remarks/>
        TaxConsultancy,
        
        /// <remarks/>
        TaxiService,
        
        /// <remarks/>
        Taxidermy,
        
        /// <remarks/>
        TeaImporter,
        
        /// <remarks/>
        TeaMerchant,
        
        /// <remarks/>
        TeaRoom,
        
        /// <remarks/>
        TechnicalCollege,
        
        /// <remarks/>
        TelecommunicationEquipmentSuppliers,
        
        /// <remarks/>
        Telecommunications,
        
        /// <remarks/>
        Telemarketing,
        
        /// <remarks/>
        TelephoneAnsweringService,
        
        /// <remarks/>
        Telesales,
        
        /// <remarks/>
        Television,
        
        /// <remarks/>
        TelevisionHire,
        
        /// <remarks/>
        TelevisionProduction,
        
        /// <remarks/>
        TelevisionRepairer,
        
        /// <remarks/>
        TelevisionSales,
        
        /// <remarks/>
        TentAndMarqueeHirer,
        
        /// <remarks/>
        TerritorialArmy,
        
        /// <remarks/>
        TextileManufacturer,
        
        /// <remarks/>
        Thatching,
        
        /// <remarks/>
        Theatre,
        
        /// <remarks/>
        TheatricalSuppliers,
        
        /// <remarks/>
        ThemePark,
        
        /// <remarks/>
        Tilers,
        
        /// <remarks/>
        TimberImporters,
        
        /// <remarks/>
        TimberMerchants,
        
        /// <remarks/>
        TimberPreservation,
        
        /// <remarks/>
        TimeshareOperators,
        
        /// <remarks/>
        TobaccoImporter,
        
        /// <remarks/>
        TobaccoManufacturer,
        
        /// <remarks/>
        Tobacconist,
        
        /// <remarks/>
        TomatoGrower,
        
        /// <remarks/>
        ToolHire,
        
        /// <remarks/>
        TourOperator,
        
        /// <remarks/>
        TouristBoard,
        
        /// <remarks/>
        TouristInformation,
        
        /// <remarks/>
        TowelSupplier,
        
        /// <remarks/>
        ToyAndGameManufacturer,
        
        /// <remarks/>
        ToyAndGameSupplier,
        
        /// <remarks/>
        TradeAssociation,
        
        /// <remarks/>
        TradeDemonstration,
        
        /// <remarks/>
        TradeUnion,
        
        /// <remarks/>
        TradingEstate,
        
        /// <remarks/>
        TradingStandardsEnforcement,
        
        /// <remarks/>
        TrailerManufacturer,
        
        /// <remarks/>
        TrailerSupplier,
        
        /// <remarks/>
        TrainingConsultancy,
        
        /// <remarks/>
        Translators,
        
        /// <remarks/>
        TransportPSV,
        
        /// <remarks/>
        TransportRoad,
        
        /// <remarks/>
        TravelAndTourism,
        
        /// <remarks/>
        TrinityHouse,
        
        /// <remarks/>
        TrustCompany,
        
        /// <remarks/>
        Tupperware,
        
        /// <remarks/>
        TurfAccountants,
        
        /// <remarks/>
        TVAndRadio,
        
        /// <remarks/>
        TVAndVideoRental,
        
        /// <remarks/>
        TypewriterServices,
        
        /// <remarks/>
        TyreDealer,
        
        /// <remarks/>
        TyreManufacturer,
        
        /// <remarks/>
        TyreSupplierAndFitting,
        
        /// <remarks/>
        Undertaker,
        
        /// <remarks/>
        UnderwaterInspection,
        
        /// <remarks/>
        UnderwritingAgency,
        
        /// <remarks/>
        Unemployed,
        
        /// <remarks/>
        UniformManufacturer,
        
        /// <remarks/>
        University,
        
        /// <remarks/>
        UnSpecified,
        
        /// <remarks/>
        Upholstery,
        
        /// <remarks/>
        VacuumCleanerRepairsAndService,
        
        /// <remarks/>
        Valuation,
        
        /// <remarks/>
        VanAndLorryHirer,
        
        /// <remarks/>
        VehicleHireSelfDrive,
        
        /// <remarks/>
        VehicleRepairer,
        
        /// <remarks/>
        VehicleTransporters,
        
        /// <remarks/>
        VendingMachineManufacturer,
        
        /// <remarks/>
        VendingMachineSupplier,
        
        /// <remarks/>
        VendingServices,
        
        /// <remarks/>
        Veneering,
        
        /// <remarks/>
        VenetianBlindManufacturer,
        
        /// <remarks/>
        VenetianBlindSupplier,
        
        /// <remarks/>
        Ventilation,
        
        /// <remarks/>
        VerminControl,
        
        /// <remarks/>
        Veterinary,
        
        /// <remarks/>
        VeterinarySupplies,
        
        /// <remarks/>
        VeterinarySurgeons,
        
        /// <remarks/>
        VideoHire,
        
        /// <remarks/>
        VideoServices,
        
        /// <remarks/>
        Vineyard,
        
        /// <remarks/>
        VoluntaryOrganisation,
        
        /// <remarks/>
        WallpaperManufacturerOrSupplier,
        
        /// <remarks/>
        WashingMachineRepairsAndServicing,
        
        /// <remarks/>
        WasteDisposal,
        
        /// <remarks/>
        Watchmaker,
        
        /// <remarks/>
        WaterIndustry,
        
        /// <remarks/>
        WaterSportsCentre,
        
        /// <remarks/>
        WaterproofCoverManufacturer,
        
        /// <remarks/>
        WaterproofCoverSupplier,
        
        /// <remarks/>
        WeatherForecasting,
        
        /// <remarks/>
        WeatherServices,
        
        /// <remarks/>
        WeightsAndMeasures,
        
        /// <remarks/>
        Welding,
        
        /// <remarks/>
        WelfareOrganisation,
        
        /// <remarks/>
        WhiskyBlenders,
        
        /// <remarks/>
        Wholesaler,
        
        /// <remarks/>
        WindowCleaning,
        
        /// <remarks/>
        WineAndSpiritMerchants,
        
        /// <remarks/>
        WineBar,
        
        /// <remarks/>
        WineMakers,
        
        /// <remarks/>
        WireRopeManufacturer,
        
        /// <remarks/>
        WoodCarving,
        
        /// <remarks/>
        WoodPreservation,
        
        /// <remarks/>
        WoodshavingsContractor,
        
        /// <remarks/>
        Woodworking,
        
        /// <remarks/>
        WoodwormAndDryRotControl,
        
        /// <remarks/>
        WoollenGoodsManufacturer,
        
        /// <remarks/>
        WoollenGoodsShop,
        
        /// <remarks/>
        WoollenMill,
        
        /// <remarks/>
        WroughtIronManufacturer,
        
        /// <remarks/>
        YachtBuilding,
        
        /// <remarks/>
        YachtChandlery,
        
        /// <remarks/>
        YachtServiceAndManagement,
        
        /// <remarks/>
        YarnSpinning,
        
        /// <remarks/>
        YouthHostelOrganisation,
        
        /// <remarks/>
        YouthOrganisation,
        
        /// <remarks/>
        ZooOperator,
        
        /// <remarks/>
        Creche,
        
        /// <remarks/>
        Gym,
        
        /// <remarks/>
        HolisticMedicine,
        
        /// <remarks/>
        Logistics,
        
        /// <remarks/>
        Montessori,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum ProfessionalBodyType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        AHCPS,
        
        /// <remarks/>
        AIC,
        
        /// <remarks/>
        RIAI,
        
        /// <remarks/>
        IATI,
        
        /// <remarks/>
        IBOA,
        
        /// <remarks/>
        CharteredAccountantsIreland,
        
        /// <remarks/>
        CIB,
        
        /// <remarks/>
        ACCA,
        
        /// <remarks/>
        ConventionCentreDublin,
        
        /// <remarks/>
        ComfortKeepers,
        
        /// <remarks/>
        CharteredLand,
        
        /// <remarks/>
        CMU,
        
        /// <remarks/>
        CPSU,
        
        /// <remarks/>
        IrishComputerSociety,
        
        /// <remarks/>
        IrishDentalAssociation,
        
        /// <remarks/>
        InstituteOfDirectors,
        
        /// <remarks/>
        EbsStaff,
        
        /// <remarks/>
        ErgoGroup,
        
        /// <remarks/>
        EngineersIreland,
        
        /// <remarks/>
        EsbOfficersAssociation,
        
        /// <remarks/>
        FiannaFail,
        
        /// <remarks/>
        CentralBankOrFinancialRegulatorStaff,
        
        /// <remarks/>
        Invesco,
        
        /// <remarks/>
        LifeAndBusinessCoachingAssociation,
        
        /// <remarks/>
        CIMA,
        
        /// <remarks/>
        IMCA,
        
        /// <remarks/>
        MarketingInstituteOfIreland,
        
        /// <remarks/>
        BankStaffNonIBOA,
        
        /// <remarks/>
        IrishNutritionAndDieteticInstitute,
        
        /// <remarks/>
        NicheGenerics,
        
        /// <remarks/>
        NonMember,
        
        /// <remarks/>
        CPA,
        
        /// <remarks/>
        CIPDIreland,
        
        /// <remarks/>
        PennEngineering,
        
        /// <remarks/>
        Pharmacists,
        
        /// <remarks/>
        IrishPlanningInstitute,
        
        /// <remarks/>
        ProjectManagement,
        
        /// <remarks/>
        PurchasingAndMaterialsManagers,
        
        /// <remarks/>
        PSEU,
        
        /// <remarks/>
        IrishSocietyOfCharteredPhysiotherapists,
        
        /// <remarks/>
        NBRU,
        
        /// <remarks/>
        SIPTU,
        
        /// <remarks/>
        ESAI,
        
        /// <remarks/>
        Sisk,
        
        /// <remarks/>
        Solicitors,
        
        /// <remarks/>
        StateStreet,
        
        /// <remarks/>
        SCS,
        
        /// <remarks/>
        PsychologicalSocietyOfIreland,
        
        /// <remarks/>
        Target250,
        
        /// <remarks/>
        IrishWheelchairAssociation,
        
        /// <remarks/>
        WaterfordITAlumni,
        
        /// <remarks/>
        WellsFargo,
        
        /// <remarks/>
        ExScheme,
        
        /// <remarks/>
        IIPA,
        
        /// <remarks/>
        GolderAssociates,
        
        /// <remarks/>
        Public,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum MaritalStatus {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        CommonLawSpouse,
        
        /// <remarks/>
        Divorced,
        
        /// <remarks/>
        Married,
        
        /// <remarks/>
        Separated,
        
        /// <remarks/>
        Single,
        
        /// <remarks/>
        Widowed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum EmploymentType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Employed,
        
        /// <remarks/>
        HouseholdDuties,
        
        /// <remarks/>
        Retired,
        
        /// <remarks/>
        SelfEmployed,
        
        /// <remarks/>
        Unemployed,
        
        /// <remarks/>
        CompanyDirector,
        
        /// <remarks/>
        IndependentMeans,
        
        /// <remarks/>
        Student,
        
        /// <remarks/>
        VoluntaryWorker,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum RelationshipType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Brother,
        
        /// <remarks/>
        BrotherInLaw,
        
        /// <remarks/>
        BusinessPartner,
        
        /// <remarks/>
        CommonLawSpouse,
        
        /// <remarks/>
        Daughter,
        
        /// <remarks/>
        DaughterInLaw,
        
        /// <remarks/>
        EmployeeOfProposer,
        
        /// <remarks/>
        EmployerOfProposer,
        
        /// <remarks/>
        FatherInLaw,
        
        /// <remarks/>
        MotherInLaw,
        
        /// <remarks/>
        Parent,
        
        /// <remarks/>
        Proposer,
        
        /// <remarks/>
        Relative,
        
        /// <remarks/>
        Sister,
        
        /// <remarks/>
        SisterInLaw,
        
        /// <remarks/>
        Son,
        
        /// <remarks/>
        SonInLaw,
        
        /// <remarks/>
        Spouse,
        
        /// <remarks/>
        Tenant,
        
        /// <remarks/>
        Unrelated,
        
        /// <remarks/>
        Partner,
        
        /// <remarks/>
        Friend,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class Contact {
        
        private PersonTitle titleField;
        
        private string titleOtherField;
        
        private string firstNameField;
        
        private string surnameField;
        
        private Address addressField;
        
        private System.DateTime dateOfBirthField;
        
        private string phoneNumberField;
        
        private string emailAddressField;
        
        /// <remarks/>
        public PersonTitle Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string TitleOther {
            get {
                return this.titleOtherField;
            }
            set {
                this.titleOtherField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string Surname {
            get {
                return this.surnameField;
            }
            set {
                this.surnameField = value;
            }
        }
        
        /// <remarks/>
        public Address Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateOfBirth {
            get {
                return this.dateOfBirthField;
            }
            set {
                this.dateOfBirthField = value;
            }
        }
        
        /// <remarks/>
        public string PhoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
        
        /// <remarks/>
        public string EmailAddress {
            get {
                return this.emailAddressField;
            }
            set {
                this.emailAddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum PersonTitle {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Br,
        
        /// <remarks/>
        Dr,
        
        /// <remarks/>
        Fr,
        
        /// <remarks/>
        Miss,
        
        /// <remarks/>
        Mr,
        
        /// <remarks/>
        Mrs,
        
        /// <remarks/>
        Ms,
        
        /// <remarks/>
        Prof,
        
        /// <remarks/>
        Rev,
        
        /// <remarks/>
        Sr,
        
        /// <remarks/>
        Dean,
        
        /// <remarks/>
        Sister,
        
        /// <remarks/>
        Bishop,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public partial class Claim {
        
        private decimal lossAmountField;
        
        private ClaimType typeField;
        
        private System.DateTime lossDateField;
        
        private bool settledField;
        
        private ClaimOccurredAt relationToPropertyField;
        
        private CoverSection coverSectionField;
        
        private string circumstanceField;
        
        /// <remarks/>
        public decimal LossAmount {
            get {
                return this.lossAmountField;
            }
            set {
                this.lossAmountField = value;
            }
        }
        
        /// <remarks/>
        public ClaimType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LossDate {
            get {
                return this.lossDateField;
            }
            set {
                this.lossDateField = value;
            }
        }
        
        /// <remarks/>
        public bool Settled {
            get {
                return this.settledField;
            }
            set {
                this.settledField = value;
            }
        }
        
        /// <remarks/>
        public ClaimOccurredAt RelationToProperty {
            get {
                return this.relationToPropertyField;
            }
            set {
                this.relationToPropertyField = value;
            }
        }
        
        /// <remarks/>
        public CoverSection CoverSection {
            get {
                return this.coverSectionField;
            }
            set {
                this.coverSectionField = value;
            }
        }
        
        /// <remarks/>
        public string Circumstance {
            get {
                return this.circumstanceField;
            }
            set {
                this.circumstanceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum ClaimType {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        AccidentalDamage,
        
        /// <remarks/>
        AccidentalDamageToAudioOrVisualEquipment,
        
        /// <remarks/>
        AccidentalLoss,
        
        /// <remarks/>
        AccidentalLossOfContents,
        
        /// <remarks/>
        Aircraft,
        
        /// <remarks/>
        AllRisksIfATypeNotAlreadyListed,
        
        /// <remarks/>
        BreakageOrCollapseOfTvAerials,
        
        /// <remarks/>
        BurstPipes,
        
        /// <remarks/>
        CoastalFlood,
        
        /// <remarks/>
        CollisionAircraftOrVehiclesOrLivestock,
        
        /// <remarks/>
        Earthquake,
        
        /// <remarks/>
        EmployersLiability,
        
        /// <remarks/>
        EscapeOfOil,
        
        /// <remarks/>
        EscapeOfWater,
        
        /// <remarks/>
        Explosion,
        
        /// <remarks/>
        ExplosionCausedByTerrorism,
        
        /// <remarks/>
        FallingTrees,
        
        /// <remarks/>
        Fire,
        
        /// <remarks/>
        FireCausedByArson,
        
        /// <remarks/>
        FireCausedByTerrorism,
        
        /// <remarks/>
        Flood,
        
        /// <remarks/>
        FreezerBreakdown,
        
        /// <remarks/>
        FreezerContents,
        
        /// <remarks/>
        GlassOrMirrors,
        
        /// <remarks/>
        GroundHeave,
        
        /// <remarks/>
        Impact,
        
        /// <remarks/>
        Landslide,
        
        /// <remarks/>
        Landslip,
        
        /// <remarks/>
        Liability,
        
        /// <remarks/>
        Lightning,
        
        /// <remarks/>
        LossOfCurrencyOrCreditCards,
        
        /// <remarks/>
        MaliciousDamage,
        
        /// <remarks/>
        MaliciousDamageOrRiot,
        
        /// <remarks/>
        PublicLiabilityBuildings,
        
        /// <remarks/>
        PublicLiabilityContents,
        
        /// <remarks/>
        RemovalOrTransit,
        
        /// <remarks/>
        RepairOfBlockedSewer,
        
        /// <remarks/>
        RiotCivilCommotion,
        
        /// <remarks/>
        RiverineFlood,
        
        /// <remarks/>
        SanitaryWare,
        
        /// <remarks/>
        StormDamage,
        
        /// <remarks/>
        Subsidence,
        
        /// <remarks/>
        Theft,
        
        /// <remarks/>
        TheftFromCar,
        
        /// <remarks/>
        UndergroundServicePipe,
        
        /// <remarks/>
        AdaptionOfHomeFollowingDisability,
        
        /// <remarks/>
        TheftInvolvingForcibleEntry,
        
        /// <remarks/>
        FatalAccidents,
        
        /// <remarks/>
        JuryDuty,
        
        /// <remarks/>
        PersonalInjuryNonMotor,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum ClaimOccurredAt {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        CurrentResidentialAddress,
        
        /// <remarks/>
        PreviousResidentialAddress,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum CoverSection {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        AllRisks,
        
        /// <remarks/>
        Buildings,
        
        /// <remarks/>
        Contents,
        
        /// <remarks/>
        BuildingsAndContents,
        
        /// <remarks/>
        Caravan,
        
        /// <remarks/>
        Renewal,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://relay.ie/Household")]
    public enum HomeRequestSource {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        HomeClient,
        
        /// <remarks/>
        eQuote,
        
        /// <remarks/>
        HIQS,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetQuotesCompletedEventHandler(object sender, GetQuotesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQuotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HomeWebServiceResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HomeWebServiceResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetDocumentsCompletedEventHandler(object sender, GetDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HomeWebServiceResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HomeWebServiceResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AcceptQuoteCompletedEventHandler(object sender, AcceptQuoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AcceptQuoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AcceptQuoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HomeWebServiceResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HomeWebServiceResponse)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591